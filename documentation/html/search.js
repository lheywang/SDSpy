window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "SDSPy", "modulename": "SDSPy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.BaseOptionnalClass", "modulename": "SDSPy.BaseOptionnalClass", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.BaseOptionnalClass.SiglentBase", "modulename": "SDSPy.BaseOptionnalClass", "qualname": "SiglentBase", "kind": "class", "doc": "<p>pySDS [SiglentBase] : Standard class for all of SCPI subsystems. May be derivated into more specific options, if needed</p>\n\n<pre><code>Attributes :\n    Private (2):\n        __instr__ :     Handle to the pyvisa class linked to the device\n        __baseclass__   Reference to the base class to get standard functions\n    Public (0):\n        None\n\nMethods :\n    Private (0):\n        None\n\n    Public (0):\n        None\n\nParents :\n    None\n\nSubclass :\n    All of the SCPI substystem class (Acquisition, WGEN...)\n    Channel modify __init__.\n</code></pre>\n"}, {"fullname": "SDSPy.BaseOptionnalClass.SiglentBase.__init__", "modulename": "SDSPy.BaseOptionnalClass", "qualname": "SiglentBase.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span>, </span><span class=\"param\"><span class=\"n\">baseclass</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "SDSPy.Files", "modulename": "SDSPy.Files", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.Files.files", "modulename": "SDSPy.Files.files", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.Files.files.SiglentFiles", "modulename": "SDSPy.Files.files", "qualname": "SiglentFiles", "kind": "class", "doc": "<p>pySDS [Files][SiglentFiles] :   Class herited from SiglentBase.\n                                Store all command related the control of filesystem.</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (7):\n        CaptureBMPScreen :          Capture the screen as a BMP File\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.Files.files.SiglentFiles.CaptureBMPScreen", "modulename": "SDSPy.Files.files", "qualname": "SiglentFiles.CaptureBMPScreen", "kind": "function", "doc": "<p>pySDS [Files][CaptureBMPScreen] : Capture the screen and write a BMP file</p>\n\n<pre><code>Arguments :\n    File : Path to be written\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">File</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition", "modulename": "SDSPy.acquisition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.acquisition.acquisition", "modulename": "SDSPy.acquisition.acquisition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition", "kind": "class", "doc": "<p>pySDS [Acquision][SiglentAcquisition] :   C lass herited from SiglentBase.\n                                            Store all command related to the control of acquision\n    Attributes :\n        Herited from SiglentBase</p>\n\n<pre><code>Methods :\n    Private (0) :\n        None\n\n    Public (13):\n        Arm :                       Prepare the device to be ready to trigger\n        Stop :                      Stop the device to be ready to trigger\n        ConfigureAquireMethod :     Configure the way of acquiring data\n        SetAverageCount :           Configure the average number of sample\n        GetAverageCount :           Get the number of average samples\n        GetMemorySize :             Get the size in sample of the memory used\n        SetMemorySize :             Configure the size in sample of the memory\n        GetAcquisitionStatus :      Return the acquision status\n        GetSampleRate :             Return the used sample rate (function of time resolution and channel)\n        GetSampleNumber :           Return the number of sample stored\n        SetInterpolationMethod :    Configure the interpolation method to be used (only on display, inter points)\n        EnableXYMode :              Enable the XY mode\n        DisableXYMode :             Disable the XY mode\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.Arm", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.Arm", "kind": "function", "doc": "<p>pySDS [Acquisition][Arm] : Place the device to be ready to acquire a waveform once a triggering condition has been validated</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetDeviceStatus()[13] which take 1 if trigger is ready, 0 otherwise\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.Stop", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.Stop", "kind": "function", "doc": "<p>pySDS [Acquisition][Stop] : Stop the device to be ready to acquire a waveform.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetDeviceStatus()[13] which take 1 if trigger is cancelled, 0 otherwise\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.ConfigureAquireMethod", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.ConfigureAquireMethod", "kind": "function", "doc": "<p>pySDS [Acquisition][ConfigureAquireMethod] : Configure the way the device handle data acquisition</p>\n\n<pre><code>Arguments :\n    Method : SAMPLING | PEAK_DETECT | AVERAGE | HIGH_RES\n    AverageNumber : Number of sample used to compute an average point\n\nReturns :\n    0 | -1 : The device responded with the same settings or differents one.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Method</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">AverageNumber</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.SetAverageCount", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.SetAverageCount", "kind": "function", "doc": "<p>pySDS [Acquisition][SetAverageCount] : Configure the number of sampled used per average</p>\n\n<pre><code>Arguments :\n    AverageNumber : Number of sample used to compute an average point\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">AverageNumber</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.GetAverageCount", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.GetAverageCount", "kind": "function", "doc": "<p>pySDS [Acquisition][GetAverageCount] : Return the number of sample used for averaging</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Number of samples\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.GetMemorySize", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.GetMemorySize", "kind": "function", "doc": "<p>PySDS [Acquisition][GetMemorySize] : Return the number in millions of samples that can be stored into the memory</p>\n\n<p>WARNING : The value is expressed in number of samples, and not in bytes !</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : The number of **MILLIONS** of sample that can be stored\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.SetMemorySize", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.SetMemorySize", "kind": "function", "doc": "<p>PySDS [Acquisition][SetMemorySize] : Set the memory size for the samples of the scope.</p>\n\n<p>WARNING : The value is expressed in number of samples, and not in bytes !</p>\n\n<pre><code>Arguments :\n    The value in **MILLIONS** to the used.\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.GetAcquisitionStatus", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.GetAcquisitionStatus", "kind": "function", "doc": "<p>PySDS [Acquisition][GetAcquisitionStatus] : Return the acquisition status of the device</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : Device response\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.GetSampleRate", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.GetSampleRate", "kind": "function", "doc": "<p>PySDS [Acquisition][GetSampleRate] : Return the acquisition sample rate that is actually used</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : Device response\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.GetSampleNumber", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.GetSampleNumber", "kind": "function", "doc": "<p>PySDS [Acquisition][GetSampleNumber] : Return the acquisition number of points captured</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : Device response\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.SetInterpolationMethod", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.SetInterpolationMethod", "kind": "function", "doc": "<p>PySDS [Acquisition][SetInterpolationMethod] :   Configure the interpolation method to be used</p>\n\n<pre><code>Arguments :\n    Method : ON | OFF (sine interpolation or linear interpolation)\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Method</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.EnableXYMode", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.EnableXYMode", "kind": "function", "doc": "<p>PySDS [Acquisition][EnableXYMode] :   Enable the XY mode</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.acquisition.acquisition.SiglentAcquisition.DisableXYMode", "modulename": "SDSPy.acquisition.acquisition", "qualname": "SiglentAcquisition.DisableXYMode", "kind": "function", "doc": "<p>PySDS [Acquisition][DisableXYMode] :    Disable the XY mode</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel", "modulename": "SDSPy.channel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.channel.channel", "modulename": "SDSPy.channel.channel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.channel.channel.SiglentChannel", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel", "kind": "class", "doc": "<p>pySDS [Channel][SiglentChannel] :   Class herited from SiglentBase.\n                                    Store all command related to a channel\n    Attributes :\n        Herited from SiglentBase</p>\n\n<pre><code>Methods :\n    Private (0) :\n        None\n\n    Public (12):\n        SetAttenuation :            Configure channel attenuation\n        EnableBandwithFilter :      Enable 20 MHz filter on the channel\n        DisableBandwithFilter :     Disable 20 MHz filter on the channel\n        SetCoupling :               Configure channel coupling\n        SetOffset :                 Configure channel offset\n        SetSkew :                   Configure channel skew\n        EnableTrace :               Enable trace draw on the screen\n        DisableTrace :              Disable trace draw on the screen\n        SetTraceUnit :              Configure trace unit\n        SetTraceDIV :               Configure trace gain\n        EnableTraceInvert :         Enable inversion of the trace\n        DisableTraceInvert :        Disable inversion of the trace\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.__init__", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.__init__", "kind": "function", "doc": "<p>Overhide the standard class init to store some more advanced data !</p>\n\n<p>Check SiglentBase doc before !</p>\n\n<p>Added attributes :\n    Private (2) :\n        __channel__ :   Descriptor of the channel\n        __impedance__ : List of supported impedance for this channel</p>\n\n<pre><code>Public (0) :\n    None\n</code></pre>\n\n<p>Added methods :\n    Private (0) :\n        None</p>\n\n<pre><code>Public (0) :\n    None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span>, </span><span class=\"param\"><span class=\"n\">baseclass</span>, </span><span class=\"param\"><span class=\"n\">channel</span>, </span><span class=\"param\"><span class=\"n\">impedance</span></span>)</span>"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.SetAttenuation", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.SetAttenuation", "kind": "function", "doc": "<p>pySDS [Channel][SetAttenuation] : Configure the probe attenuation</p>\n\n<pre><code>Arguments :\n    Value : The attenuation value, between 0.1 and 10000 (checked against a list of values)\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.EnableBandwithFilter", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.EnableBandwithFilter", "kind": "function", "doc": "<p>pySDS [Channel][EnableBandwithFilter] : Enable a 20 Mhz low pass filter on the channel. Used to rejet high frequency noise.</p>\n\n<pre><code>Arguments :\n    None__\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.DisableBandwithFilter", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.DisableBandwithFilter", "kind": "function", "doc": "<p>pySDS [Channel][DisableBandwithFilter] : Disable a 20 Mhz low pass filter on the channel.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.SetCoupling", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.SetCoupling", "kind": "function", "doc": "<p>pySDS [Channel][SetCoupling] : Set the channel coupling mode.</p>\n\n<pre><code>Arguments :\n    ACDC : Mode of coupling, AC or DC (AC rejet any DC signal). Values are A | D\n    Impedance : Impedance of input. Warning : Some device doesn't support de 50 Ohm coupling !\n\nReturns :\n    self.GetAllErrors()\n    or\n    \"-1\" : Incorrect coupling\n    \"-2\" : Incorrect impedance\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ACDC</span><span class=\"o\">=</span><span class=\"s1\">&#39;D&#39;</span>, </span><span class=\"param\"><span class=\"n\">Impedance</span><span class=\"o\">=</span><span class=\"mi\">1000000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.SetOffset", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.SetOffset", "kind": "function", "doc": "<p>pySDS [Channel][SetOffset] : Configure the offset used.</p>\n\n<pre><code>Arguments :\n    Offset, in volts\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Offset</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.SetSkew", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.SetSkew", "kind": "function", "doc": "<p>pySDS [Channel][SetSkew] : Configure the delay between each channels, to compensate cable lenght matching</p>\n\n<pre><code>Arguments :\n    Skew : +- 100 ns to be applied\n\nReturns :\n    self.GetAllErrors()\n    or\n    [1, -1] if Skew is not valid !\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Skew</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.EnableTrace", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.EnableTrace", "kind": "function", "doc": "<p>pySDS [Channel][EnableTrace] : Enable the draw of the trace on the screen</p>\n\n<pre><code>Arguments :\n    None\n\nReturn :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.DisableTrace", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.DisableTrace", "kind": "function", "doc": "<p>pySDS [Channel][EnableTrace] : Disable the draw of the trace on the screen</p>\n\n<pre><code>Arguments :\n    None\n\nReturn :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.SetTraceUnit", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.SetTraceUnit", "kind": "function", "doc": "<p>pySDS [Channel][SetTraceUnit] : Configure if the trace is on V (Volt) or A (Ampere)</p>\n\n<pre><code>Arguments :\n    Unit : V | A\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.SetTraceDIV", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.SetTraceDIV", "kind": "function", "doc": "<p>pySDS [Channel][SetTraceVDIV] : Configure the gain on the unit of the trace, from 500E-6 to 10</p>\n\n<pre><code>Arguments :\n    Div : Gain to be applied\n\nReturns :\n    self.GetAllErrors()\n    or\n    or -1 if invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Div</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.EnableTraceInvert", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.EnableTraceInvert", "kind": "function", "doc": "<p>pySDS [Channel][EnableTraceInvert] : Enable invert the measure of the trace (* -1)</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.channel.channel.SiglentChannel.DisableTraceInvert", "modulename": "SDSPy.channel.channel", "qualname": "SiglentChannel.DisableTraceInvert", "kind": "function", "doc": "<p>pySDS [Channel][DisableTraceInvert] : Disable invert the measure of the trace (* -1)</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.communication", "modulename": "SDSPy.communication", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.communication.communication", "modulename": "SDSPy.communication.communication", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.communication.communication.SiglentCommunication", "modulename": "SDSPy.communication.communication", "qualname": "SiglentCommunication", "kind": "class", "doc": "<p>pySDS [Communication][SiglentCommunication] :   Class herited from SiglentBase.\n                                                Store all command related to the communication bus\n    Attributes :\n        Herited from SiglentBase</p>\n\n<pre><code>Methods :\n    Private (0) :\n        None\n\n    Public (2):\n        SetCommHeader :      Configure the form of response of the device\n        GetCommHeader :      Return the form of response of the device\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.communication.communication.SiglentCommunication.SetCommHeader", "modulename": "SDSPy.communication.communication", "qualname": "SiglentCommunication.SetCommHeader", "kind": "function", "doc": "<p>SDSpy [Communication][SetCommHeader] :  Configure the used form to answer for the device.</p>\n\n<p>WARNING :   This function may cause others function to become broken since the parsing from the default answer.\n            LONG / SHORT won't cause issues, the real issue is with OFF where the unit is suppressed. Since the parsing remove the last char, you will end up with power errors !</p>\n\n<pre><code>Arguments :\n    Mode : LONG | SHORT | OFF : The mode of response\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.communication.communication.SiglentCommunication.GetCommHeader", "modulename": "SDSPy.communication.communication", "qualname": "SiglentCommunication.GetCommHeader", "kind": "function", "doc": "<p>SDSpy [Communication][GetCommHeader] :  Return the response form of the device</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : The mode of operation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.cursor", "modulename": "SDSPy.cursor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.cursor.cursor", "modulename": "SDSPy.cursor.cursor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor", "kind": "class", "doc": "<p>pySDS [Cursor][SiglentCursor] : Class herited from SiglentBase.\n                                Store all command related the control of cursors\n    Attributes :\n        Herited from SiglentBase</p>\n\n<pre><code>Methods :\n    Private (0) :\n        None\n\n    Public (6):\n        SetCursorMode :     Set the mode for a cursor\n        GetCursorMode :     Read the mode of a cursor\n        PlaceCursor :       Place a cursor\n        GetPlacedCursor :   Return the placed cursor on a trace\n        SetCursorType :     Configure the cursor type\n        GetCursorValue :    Read the value of a cursor\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor.SetCursorMode", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor.SetCursorMode", "kind": "function", "doc": "<p>pySDS [Cursor][SetCursorMode] : Set the mode of operation of the cursors</p>\n\n<pre><code>Arguments :\n    Mode :  The mode wanted between OFF | MANUAL | TRACK | (ON)\n            *ON is reserved to some legacy devices, it's usage will trigger a warning !\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 if invalid mode has been passed\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor.GetCursorMode", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor.GetCursorMode", "kind": "function", "doc": "<p>pySDS [Cursor][GetCursorMode] : Return the mode of operation of the cursor</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Device response\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor.PlaceCursor", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor.PlaceCursor", "kind": "function", "doc": "<p>pySDS [Cursor][PlaceCursor] : Place a cursor</p>\n\n<p>WARNING :   Each cursor is unique, you can't set twice the cursor on two different channels.\n            The device will consider the last call only.</p>\n\n<p>WARNING2 :  Some settings may trigger an out of bound error. Make sure to check the return code of this function.</p>\n\n<pre><code>Arguments :\n    Channel : The channel to which the cursor belong. This is a SiglentChannel class.\n    Cursor : VREF | VDIF | TREF | TDIF | HREF | HDIF\n    Position : Value where to place the cursor. This value is sensitive to errors and isn't check internally\n\nReturns :\n    GetAllErrors() : Read and return all of the device errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span>,</span><span class=\"param\">\t<span class=\"n\">Cursor</span>,</span><span class=\"param\">\t<span class=\"n\">Position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor.GetPlacedCursor", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor.GetPlacedCursor", "kind": "function", "doc": "<p>pySDS [Cursor][GetPlacedCursor] : Return the name of the cursor placed on a channel</p>\n\n<pre><code>Arguments :\n    Channel : The channel to which the cursor belong. This is a SiglentChannel class.\n\nReturns :\n    List of cursor linked to this channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor.SetCursorType", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor.SetCursorType", "kind": "function", "doc": "<p>pySDS [Cursor][SetCursorType] : Configure the cursor type</p>\n\n<pre><code>Arguments :\n    Type : X | -X | Y | -Y\n\nReturns :\n    Configured type\n    or \"-1\" if wrong type passed\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.cursor.cursor.SiglentCursor.GetCursorValue", "modulename": "SDSPy.cursor.cursor", "qualname": "SiglentCursor.GetCursorValue", "kind": "function", "doc": "<p>pySDS [Cursor][GetCursorValue] : Return the values of a cursor</p>\n\n<p>WARNING : Make sure that a cursor has been placed on this channel, or the device will trigger an error :</p>\n\n<pre><code>Arguments :\n    Channel : The channel where the measure belong\n    Mode : HREL | VREL ==&gt; Read the horizontal or vertical measure\n\nReturns : (List of values)\n    Delta\n    (1 / Delta) : Only in HREL mode, 0 in VREL mode\n    Value1\n    Value2\n\n    or\n    [-err, -err, -err, -err] in case or error with err = errror code\n\nErrors code\n    -1 : Error occured while running the command\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span>, </span><span class=\"param\"><span class=\"n\">Mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode", "modulename": "SDSPy.decode", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.decode.decode", "modulename": "SDSPy.decode.decode", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.decode.decode.SiglentDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode", "kind": "class", "doc": "<p>pySDS [Decode][SiglentDecode] : Class herited from SiglentBase.\n                                Store all command related the control of digital bus decoding\n    Attributes :\n        Herited from SiglentBase</p>\n\n<pre><code>Methods :\n    Private (0) :\n        None\n\n    Public (8):\n        EnableDecode :          Enable the bus decoding ability\n        DisableDecode :         Disable the bus decoding ability\n        ConfigureDecode :       Configure the global bus decoding behavior\n        ConfigureI2CDecode :    Configure the I2C Decoding\n        ConfigureSPIDecode :    Configure the SPI Decoding\n        ConfigureUARTDecode :   Configure the UART Decoding\n        ConfigureCANDecode :    Configure the CAN Decoding\n        ConfigureLINDecode :    Configure the LIN Decoding\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.EnableDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.EnableDecode", "kind": "function", "doc": "<p>pySDS [Decode][EnableDecode] : Enable the decode option on the scope</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.DisableDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.DisableDecode", "kind": "function", "doc": "<p>pySDS [Decode][DisableDecode] : Disable the decode option on the scope</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.ConfigureDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.ConfigureDecode", "kind": "function", "doc": "<p>pySDS [Decode][ConfigureDecode] : Configure the decode engine</p>\n\n<pre><code>Arguments :\n    Bus : 1 | 2 (Bus number)\n    Format : BIN | DEC | HEX (Mode of print on screen) Default to HEX\n    List : OFF | D1 | D2 Default to OFF\n    Link : TR_TO_DC | DC_TO_TR\n    Scroll : Integer\n    Lines : Integer\n\nReturns :\n    GetAllErrors() : List of errors\n    or\n    [n, Error codes] if errors occured within the function\n\nErrors codes :\n    -1 :    Invalid Lines number\n    -2 :    Invalid scroll number (must be &gt; 0 and &lt; Lines)\n    -3 :    Invalid Link mode\n    -4 :    Invalid List mode\n    -5 :    Invalid format\n    -6 :    Invalid Bus\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">Format</span><span class=\"o\">=</span><span class=\"s1\">&#39;HEX&#39;</span>, </span><span class=\"param\"><span class=\"n\">List</span><span class=\"o\">=</span><span class=\"s1\">&#39;OFF&#39;</span>, </span><span class=\"param\"><span class=\"n\">Link</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">Scroll</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">Lines</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.ConfigureI2CDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.ConfigureI2CDecode", "kind": "function", "doc": "<p>pySDS [Decode][ConfigureI2CDecode] : Configure the I2C decoding</p>\n\n<p>WARNING : If digital channel is provided, trigger level will be ignored</p>\n\n<pre><code>Arguments :\n    Bus :       Bus number, as in integer\n    SCL :       SCL input. May be SiglentChannel or SiglentDigital class\n    SDA :       SCL input. May be SiglentChannel or SiglentDigital class\n    SCLT :      Trigger Level for SCL                                           Default to 1.65\n    SDAT :      Trigger Level for SCL                                           Default to 1.65\n    Display :   ON | OFF Display the bus decoding result                        Default to ON\n    RW :        ON | OFF Display the Read/Write bit inside of adress, or not    Default to ON\n\nReturns :\n    GetAllErrors() : List of errors\n    or\n    List or errors codes within the function\n\nErrors codes :\n    -1 :    Wrong object passed on SCL\n    -2 :    Wrong object passed on SDA\n    -3 :    Invalid mode for Display\n    -4 :    Invalid mode for RW\n    -5 :    Invalid bus number\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">SCL</span>,</span><span class=\"param\">\t<span class=\"n\">SDA</span>,</span><span class=\"param\">\t<span class=\"n\">SCLT</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">SDAT</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">Display</span><span class=\"o\">=</span><span class=\"s1\">&#39;ON&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">RW</span><span class=\"o\">=</span><span class=\"s1\">&#39;ON&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.ConfigureSPIDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.ConfigureSPIDecode", "kind": "function", "doc": "<p>pySDS [Decode][ConfigureSPIDecode] : Configure the decoding of the SPI Bus</p>\n\n<p>WARNING : If a digital channel is provided, it's trigger value will be ignored</p>\n\n<pre><code>Arguments  :\n    Bus :       1 | 2 Bus used to decode\n    CLK :       Channel for CLK. May be a channel or a digital channel\n    MOSI :      Channel for MOSI. May be a channel or a digital channel\n    MISO :      Channel for MISO. May be a channel or a digital channel\n    CS :        Channel for CS. May be a channel or a digital channel\n    CSMode :    CS | NCS | TIMEOUT Configure the CS operation mode                                          Defaults to CS\n    Edge :      RISING | FALLING Configure the mode of SPI between mode 0, 2 : Falling or 1, 3 : Rising     Defaults to RISING\n    Bit :       MSB | LSB Configure the bit order                                                           Defaults to MSB\n    Len :       Configure the transfer length                                                               Defaults to 8 bit\n    CLKT :      Configure the trigger level of the CLK.                                                     Defaults to 1.65.\n    MOSIT :     Configure the trigger level of the MOSI.                                                    Defaults to 1.65.\n    MISOT :     Configure the trigger level of the MISO.                                                    Defaults to 1.65.\n    CST :       Configure the trigger level of the CS.                                                      Defaults to 1.65.\n    CSTimeout : Timeout value for the CS when in timeout mode                                               Defaults to 2 (us)\n    Display :   ON | OFF Display the result on the screen                                                   Defaults to ON\n\nReturns :\n    GetAllErrors() : List of errors\n    Or\n    List of errors that occured within the function\n\nErrors codes :\n    -1 :    Incorrect type passed for CLK. Waiting for a SiglentChannel or SiglentDChannel\n    -2 :    Incorrect type passed for MOSI. Waiting for a SiglentChannel or SiglentDChannel\n    -3 :    Incorrect type passed for MISO. Waiting for a SiglentChannel or SiglentDChannel\n    -4 :    Incorrect type passed for CS. Waiting for a SiglentChannel or SiglentDChannel\n    -5 :    Invalid CS Mode\n    -6 :    Invalid Bus\n    -7 :    Invalid Edge provided\n    -8 :    Invalid bit provided\n    -9 :    Len is out of bounds (4-32)\n    -10 :   Invalid display mode\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">CLK</span>,</span><span class=\"param\">\t<span class=\"n\">MOSI</span>,</span><span class=\"param\">\t<span class=\"n\">MISO</span>,</span><span class=\"param\">\t<span class=\"n\">CS</span>,</span><span class=\"param\">\t<span class=\"n\">CSMode</span><span class=\"o\">=</span><span class=\"s1\">&#39;CS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">Edge</span><span class=\"o\">=</span><span class=\"s1\">&#39;RISING&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">Bit</span><span class=\"o\">=</span><span class=\"s1\">&#39;MSB&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">Len</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">CLKT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">MOSIT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">MISOT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">CST</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">CSTimeout</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">Display</span><span class=\"o\">=</span><span class=\"s1\">&#39;ON&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.ConfigureUARTDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.ConfigureUARTDecode", "kind": "function", "doc": "<p>pySDS [Decode][ConfigureUARTDecode] : Configure the UART Decoding</p>\n\n<p>WARNING : If a SiglentDChannel is provided, then the associated trigger value will be ignored.</p>\n\n<pre><code>Arguments :\n    Bus :           Select the number of the bus decoder used. 1 | 2\n    RX :            SiglentChannel or SiglentDChannel associated with RX\n    TX :            SiglentChannel or SiglentDChannel associated with TX\n    Baud :          Baud rate.                                              Default to 115200\n    DLEN :          Data len.  5 &lt;= Val &lt;= 8                                Default to 8\n    Parity :        Parity bit. NONE | EVEN | ODD                           Default to NONE\n    Stop :          Number of stop bits. 1 | 1.5 | 2                        Default to 1\n    Polarity :      Polarity of the signal. LOW | HIGH                      Default to HIGH\n    Bit :           Order of bits on the message. MSB | LSB                 Default to MSB\n    RXT :           RX Trigger level.                                       Default to 1.65\n    TXT :           TX Trigger level.                                       Default to 1.65\n    Dsiplay :       Display the bus or not ON | OFF                         Default to ON\n\nReturns :\n    GetAllErrors() : List of errors\n    or\n    List of errors that occured within the function execution, presented in the same way.\n\nErrors codes\n    -1 :    Invalid type passed for RX\n    -2 :    Invalid type passed for TX\n    -3 :    Invalid Parity mode\n    -4 :    Invalid stop bit number\n    -5 :    Invalid polarity\n    -6 :    Invalid bit order\n    -7 :    Invalid display mode\n    -8 :    Invalid bus number\n    -9 :    Invalid data len\n    -10 :   Invalid baud rate\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">RX</span>,</span><span class=\"param\">\t<span class=\"n\">TX</span>,</span><span class=\"param\">\t<span class=\"n\">Baud</span><span class=\"o\">=</span><span class=\"mi\">115200</span>,</span><span class=\"param\">\t<span class=\"n\">DLEN</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">Parity</span><span class=\"o\">=</span><span class=\"s1\">&#39;NONE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">Stop</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">Polarity</span><span class=\"o\">=</span><span class=\"s1\">&#39;HIGH&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">Bit</span><span class=\"o\">=</span><span class=\"s1\">&#39;MSB&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">RXT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">TXT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">Display</span><span class=\"o\">=</span><span class=\"s1\">&#39;ON&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.ConfigureCANDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.ConfigureCANDecode", "kind": "function", "doc": "<p>pySDS [Decode][ConfigureCANDecode] : Configure the CAN decoding operation</p>\n\n<p>WARNING : If a SiglentDChannel is provided, then the associated trigger value will be ignored.</p>\n\n<pre><code>Arguments :\n    Bus :       ID of the bus where to place the decode results\n    CANH :      CANH associated SiglentChannel or SiglentDChannel.\n    CANL :      CANL associated SiglentChannel or SiglentDChannel.\n    SRC :       Source for decoding. CANH_H | CAN_L | SUB_L.\n    Baud :      Baud rate of the communication.\n    CANHT :     Threshold for the CANH pin.                             Default to 1.65\n    CANLT :     Threshold for the CANL pin.                             Default to 1.65\n    Display :   Shall we display the decoding on the screen ?           Default to ON\n\nReturns :\n    GetAllErrors() : List of errors\n    or\n    List of errors that occured within the function execution, formatted in the same way\n\nErrors codes :\n    -1 :    Invalid CANH type passed\n    -2 :    Invalid CANL type passed\n    -3 :    Invalid SRC\n    -4 :    Invalid DISPLAY setting.\n    -5 :    Invalid bus ID\n    -6 :    Invalid BAUD RATE\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">CANH</span>,</span><span class=\"param\">\t<span class=\"n\">CANL</span>,</span><span class=\"param\">\t<span class=\"n\">SRC</span>,</span><span class=\"param\">\t<span class=\"n\">Baud</span>,</span><span class=\"param\">\t<span class=\"n\">CANHT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">CANLT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>,</span><span class=\"param\">\t<span class=\"n\">Display</span><span class=\"o\">=</span><span class=\"s1\">&#39;ON&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.decode.decode.SiglentDecode.ConfigureLINDecode", "modulename": "SDSPy.decode.decode", "qualname": "SiglentDecode.ConfigureLINDecode", "kind": "function", "doc": "<p>pySDS [Decode][ConfigureLINDecode] : Configure the LIn decoding operation</p>\n\n<p>WARNING : If a SiglentDChannel is provided, then the associated trigger value will be ignored.</p>\n\n<pre><code>Arguments :\n    Bus :       ID of the bus where to place the decode results\n    SRC :       SiglentChannel or SiglentDChannel associated with the SRC Pin\n    Baud :      Baud rate of the communication\n    SRCT :      Threshold the SRC Pin.                                              Default to 1.65\n    Display :   Shall we show the result on the screen ?                            Default to ON\n\nReturns :\n    GetAllErrors() : List of errors\n    or\n    List of errors that occured within the function execution, formatted in the same way\n\nErrors codes :\n    -1 :    Invalid SRC type passed\n    -2 :    Invalid DISPLAY setting.\n    -3 :    Invalid bus ID\n    -4 :    Invalid BAUD RATE\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Bus</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">SRC</span>, </span><span class=\"param\"><span class=\"n\">Baud</span>, </span><span class=\"param\"><span class=\"n\">SRCT</span><span class=\"o\">=</span><span class=\"mf\">1.65</span>, </span><span class=\"param\"><span class=\"n\">Display</span><span class=\"o\">=</span><span class=\"s1\">&#39;ON&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.deprecated_functions", "modulename": "SDSPy.deprecated_functions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.deprecated_functions.acal", "modulename": "SDSPy.deprecated_functions.acal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.deprecated_functions.acal.ACAL", "modulename": "SDSPy.deprecated_functions.acal", "qualname": "ACAL", "kind": "class", "doc": "<p>pySDS [SiglentBase] : Standard class for all of SCPI subsystems. May be derivated into more specific options, if needed</p>\n\n<pre><code>Attributes :\n    Private (2):\n        __instr__ :     Handle to the pyvisa class linked to the device\n        __baseclass__   Reference to the base class to get standard functions\n    Public (0):\n        None\n\nMethods :\n    Private (0):\n        None\n\n    Public (0):\n        None\n\nParents :\n    None\n\nSubclass :\n    All of the SCPI substystem class (Acquisition, WGEN...)\n    Channel modify __init__.\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.deprecated_functions.acal.ACAL.EnableAutomaticCalibration", "modulename": "SDSPy.deprecated_functions.acal", "qualname": "ACAL.EnableAutomaticCalibration", "kind": "function", "doc": "<p>PySDS [EnableAutomaticCalibration] :    Enable automatic calibration of the device. (When ? )</p>\n\n<p>WARNING : This command is only available on some CFL series devices</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.deprecated_functions.acal.ACAL.DisableAutomaticCalibration", "modulename": "SDSPy.deprecated_functions.acal", "qualname": "ACAL.DisableAutomaticCalibration", "kind": "function", "doc": "<p>PySDS [DisableAutomaticCalibration] :    Disable automatic calibration of the device.</p>\n\n<p>WARNING : This command is only available on some CFL series devices</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.deprecated_functions.acal.ACAL.GetAutomaticCalibrationState", "modulename": "SDSPy.deprecated_functions.acal", "qualname": "ACAL.GetAutomaticCalibrationState", "kind": "function", "doc": "<p>PySDS [GetAutomaticCalibrationState] :   Return the state of the autocalibration</p>\n\n<p>WARNING : This command is only available on some CFL series devices</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    True | False if enabled | Disabled\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.deprecated_functions.counter", "modulename": "SDSPy.deprecated_functions.counter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.deprecated_functions.counter.COUNTER", "modulename": "SDSPy.deprecated_functions.counter", "qualname": "COUNTER", "kind": "class", "doc": "<p>pySDS [SiglentBase] : Standard class for all of SCPI subsystems. May be derivated into more specific options, if needed</p>\n\n<pre><code>Attributes :\n    Private (2):\n        __instr__ :     Handle to the pyvisa class linked to the device\n        __baseclass__   Reference to the base class to get standard functions\n    Public (0):\n        None\n\nMethods :\n    Private (0):\n        None\n\n    Public (0):\n        None\n\nParents :\n    None\n\nSubclass :\n    All of the SCPI substystem class (Acquisition, WGEN...)\n    Channel modify __init__.\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.deprecated_functions.date", "modulename": "SDSPy.deprecated_functions.date", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.deprecated_functions.date.DATE", "modulename": "SDSPy.deprecated_functions.date", "qualname": "DATE", "kind": "class", "doc": "<p>pySDS [SiglentBase] : Standard class for all of SCPI subsystems. May be derivated into more specific options, if needed</p>\n\n<pre><code>Attributes :\n    Private (2):\n        __instr__ :     Handle to the pyvisa class linked to the device\n        __baseclass__   Reference to the base class to get standard functions\n    Public (0):\n        None\n\nMethods :\n    Private (0):\n        None\n\n    Public (0):\n        None\n\nParents :\n    None\n\nSubclass :\n    All of the SCPI substystem class (Acquisition, WGEN...)\n    Channel modify __init__.\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.deprecated_functions.date.DATE.GetDate", "modulename": "SDSPy.deprecated_functions.date", "qualname": "DATE.GetDate", "kind": "function", "doc": "<p>PySDS [GetDate] :   Read and return the date stored on the oscilloscope RTC</p>\n\n<p>Actually, this function does not work, despite that it's presence is stated on the datasheet.\n--> Possible issues :\n        Function non implemented ?\n        Syntax not OK ?</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Python Datetime object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.deprecated_functions.date.DATE.SetDate", "modulename": "SDSPy.deprecated_functions.date", "qualname": "DATE.SetDate", "kind": "function", "doc": "<p>PySDS [SetDate] :   Set the internal RTC date and time</p>\n\n<pre><code>Arguments :\n    Python Datetime object\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.digital", "modulename": "SDSPy.digital", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.digital.digital", "modulename": "SDSPy.digital.digital", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.digital.digital.SiglentDigital", "modulename": "SDSPy.digital.digital", "qualname": "SiglentDigital", "kind": "class", "doc": "<p>pySDS [Digital][SiglentDigital] :   Class herited from SiglentBase.\n                                    Store all command related the control of digital channels (scopes with MSO option only)</p>\n\n<pre><code>WARNING :   This section of code is extremely undocumented, and the rare parts that are documentation aren't comprehesible.\n            Take all of this code with salt, since bugs can exists here due to an error of my person, or an error of the doc, or both\n            If something went bugging here, you can report it !\n\nAttributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (5):\n        EnableDigitalChannel :          Enable a channel\n        DisableDigitalChannel :         Disable a channel\n        SetDigitalChannelThreshold :    Configure threshold for a group of channels\n        EnableDigital :                 Enable global digital engine\n        DisableDigital :                Disable global digital engine\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.digital.digital.SiglentDigital.EnableDigitalChannel", "modulename": "SDSPy.digital.digital", "qualname": "SiglentDigital.EnableDigitalChannel", "kind": "function", "doc": "<p>pySDS [Digital][EnableDigitalChannel] : Enable a digital channel and display it on the screen</p>\n\n<pre><code>Arguments :\n    Channel : SiglentDChannel to be enabled and shown\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">digital</span><span class=\"o\">.</span><span class=\"n\">digitalchannel</span><span class=\"o\">.</span><span class=\"n\">SiglentDChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.digital.digital.SiglentDigital.DisableDigitalChannel", "modulename": "SDSPy.digital.digital", "qualname": "SiglentDigital.DisableDigitalChannel", "kind": "function", "doc": "<p>pySDS [Digital][DisableDigitalChannel] : Disable a digital channel and display it on the screen</p>\n\n<pre><code>Arguments :\n    Channel : SiglentDChannel to be disabled and hide\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">digital</span><span class=\"o\">.</span><span class=\"n\">digitalchannel</span><span class=\"o\">.</span><span class=\"n\">SiglentDChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.digital.digital.SiglentDigital.SetDigitalChannelThreshold", "modulename": "SDSPy.digital.digital", "qualname": "SiglentDigital.SetDigitalChannelThreshold", "kind": "function", "doc": "<p>pySDS [Digital][SetDigitalChannelThreshold] : Configure the threshold for a type of logic signals.</p>\n\n<p>WARNING : This setting is applied for a group of 8 channels. There is only two groups.</p>\n\n<pre><code>Arguments :\n    Group : 1 | 2 Group where the setting is applied\n    Threshold : TTL | CMOS | CMOS3.3 | CMOS2.5 | CUSTOM\n    Value : Only for CUSTOM, the value in V between -5 and 5\n\nReturns :\n    self.GetAllErrors() : List of errors\n    or\n    Errors codes\n\nErrors codes :\n    -1 : Invalid group\n    -2 : Invalid Threshold type\n    -3 : Invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Group</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.digital.digital.SiglentDigital.EnableDigital", "modulename": "SDSPy.digital.digital", "qualname": "SiglentDigital.EnableDigital", "kind": "function", "doc": "<p>pySDS [Digital][EnableDigital] : Enable the digital section on the scope</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.digital.digital.SiglentDigital.DisableDigital", "modulename": "SDSPy.digital.digital", "qualname": "SiglentDigital.DisableDigital", "kind": "function", "doc": "<p>pySDS [Digital][DisableDigital] : Disable the digital section on the scope</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.digital.digitalchannel", "modulename": "SDSPy.digital.digitalchannel", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.digital.digitalchannel.SiglentDChannel", "modulename": "SDSPy.digital.digitalchannel", "qualname": "SiglentDChannel", "kind": "class", "doc": "<p>pySDS [SiglentBase] : Standard class for all of SCPI subsystems. May be derivated into more specific options, if needed</p>\n\n<pre><code>Attributes :\n    Private (2):\n        __instr__ :     Handle to the pyvisa class linked to the device\n        __baseclass__   Reference to the base class to get standard functions\n    Public (0):\n        None\n\nMethods :\n    Private (0):\n        None\n\n    Public (0):\n        None\n\nParents :\n    None\n\nSubclass :\n    All of the SCPI substystem class (Acquisition, WGEN...)\n    Channel modify __init__.\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.digital.digitalchannel.SiglentDChannel.__init__", "modulename": "SDSPy.digital.digitalchannel", "qualname": "SiglentDChannel.__init__", "kind": "function", "doc": "<p>Overhide the standard class init to store some more advanced data !</p>\n\n<p>Check SiglentBase doc before !</p>\n\n<p>Added attributes :\n    Private (1) :\n        __channel__ :   Descriptor of the channel</p>\n\n<pre><code>Public (0) :\n    None\n</code></pre>\n\n<p>Added methods :\n    Private (0) :\n        None</p>\n\n<pre><code>Public (0) :\n    None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span>, </span><span class=\"param\"><span class=\"n\">baseclass</span>, </span><span class=\"param\"><span class=\"n\">channel</span></span>)</span>"}, {"fullname": "SDSPy.display", "modulename": "SDSPy.display", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.display.display", "modulename": "SDSPy.display.display", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.display.display.SiglentScreen", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen", "kind": "class", "doc": "<p>pySDS [Display][SiglentScreen] :    Class herited from SiglentBase.\n                                    Store all command related the control of display.</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (7):\n        EnableScreenInterpolation :         Enable continuous display of the tracks\n        DisableScreenInterpolation :        Enable the display of only points\n        SelectGrid :                        Select the grid type\n        SetIntensity :                      Select the trace and grid intensity\n        ShowMenu :                          Show menu\n        HideMenu :                          Hide menu\n        ConfigurePersistence :              Configure trace persistence\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.display.display.SiglentScreen.EnableScreenInterpolation", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.EnableScreenInterpolation", "kind": "function", "doc": "<p>pySDS [Screen][EnableScreenInterpolation] : Enable the drawing of lines between data points</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.display.display.SiglentScreen.DisableScreenInterpolation", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.DisableScreenInterpolation", "kind": "function", "doc": "<p>pySDS [Screen][DisableScreenInterpolation] : Disable the drawing of lines between data points</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.display.display.SiglentScreen.SelectGrid", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.SelectGrid", "kind": "function", "doc": "<p>pySDS [Screen][SelectGrid] : Select the grid on the display</p>\n\n<pre><code>Arguments :\n    Grid : FULL | HALF | OFF\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid grid mode\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Grid</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.display.display.SiglentScreen.SetIntensity", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.SetIntensity", "kind": "function", "doc": "<p>pySDS [Screen][Intensity] : Set intensity of the grid display</p>\n\n<pre><code>Arguments :\n    Grid : Value for the grid. 0 to 100\n    Trace : Value for the trace. 0 to 100\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid grid value\n    -2 : Invalid trace value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Grid</span>, </span><span class=\"param\"><span class=\"n\">Trace</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.display.display.SiglentScreen.ShowMenu", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.ShowMenu", "kind": "function", "doc": "<p>pySDS [Screen][ShowMenu] : Show the menu on the screen</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.display.display.SiglentScreen.HideMenu", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.HideMenu", "kind": "function", "doc": "<p>pySDS [Screen][HideMenu] : Hide the menu on the screen</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.display.display.SiglentScreen.ConfigurePersistence", "modulename": "SDSPy.display.display", "qualname": "SiglentScreen.ConfigurePersistence", "kind": "function", "doc": "<p>pySDS [Screen][ConfigurePersistence] : Configure the persistence of the track on the screen</p>\n\n<p>WARNING : OFF may not be available for all of the models.</p>\n\n<pre><code>Arguments :\n    Value : INFINITE | 1 | 5 | 10 | 30 | (OFF)\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid persistence value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics", "modulename": "SDSPy.generics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.generics.generics", "modulename": "SDSPy.generics.generics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics", "kind": "class", "doc": "<p>pySDS [SiglentBase] : Standard class for all of SCPI subsystems. May be derivated into more specific options, if needed</p>\n\n<pre><code>Attributes :\n    Private (2):\n        __instr__ :     Handle to the pyvisa class linked to the device\n        __baseclass__   Reference to the base class to get standard functions\n    Public (0):\n        None\n\nMethods :\n    Private (0):\n        None\n\n    Public (0):\n        None\n\nParents :\n    None\n\nSubclass :\n    All of the SCPI substystem class (Acquisition, WGEN...)\n    Channel modify __init__.\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ClearStatus", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ClearStatus", "kind": "function", "doc": "<p>PySDS [ClearStatus] :   Clear the status register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadCMR", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadCMR", "kind": "function", "doc": "<p>PySDS [ReadCMR] :   Read and clear the CMR register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadDDR", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadDDR", "kind": "function", "doc": "<p>PySDS [ReadDDR] :   Read and clear the DDR register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadESE", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadESE", "kind": "function", "doc": "<p>PySDS [ReadESE] :   Read and clear the ESE register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadESR", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadESR", "kind": "function", "doc": "<p>PySDS [ReadESR] :   Read and clear the ESE register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadEXR", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadEXR", "kind": "function", "doc": "<p>PySDS [ReadEXR] :   Read and clear the EXR register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadIDN", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadIDN", "kind": "function", "doc": "<p>PySDS [ReadIDN] :   Read back the device name</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : The output of the command\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadINR", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadINR", "kind": "function", "doc": "<p>PySDS [ReadINR] :   Read and clear the device status</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadOPC", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadOPC", "kind": "function", "doc": "<p>PySDS [ReadOPC] :   Read the Operation Complete status bit.\n                    Actually, this function always return 1, because the device respond when the operation is complete...</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadOPT", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadOPT", "kind": "function", "doc": "<p>PySDS [ReadOPT] :   Read the installed options on the device</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : The output of the command\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadSRE", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadSRE", "kind": "function", "doc": "<p>PySDS [ReadSRE] :   Read the service request enable register value</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.ReadSTB", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.ReadSTB", "kind": "function", "doc": "<p>PySDS [ReadSTB] :   Read the status register</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Integer : Register value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.SetESE", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.SetESE", "kind": "function", "doc": "<p>PySDS [SetESE] :   Write the ESE Register</p>\n\n<pre><code>Arguments :\n    Integer : Value to be written\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.SetESR", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.SetESR", "kind": "function", "doc": "<p>PySDS [SetESR] :   Write the ESR Register</p>\n\n<pre><code>Arguments :\n    Integer : Value to be written\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.SetOPC", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.SetOPC", "kind": "function", "doc": "<p>PySDS [SetOPC] :   Write the OPC (Operation Complete) Status bit</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.generics.generics.SCPIGenerics.SetSRE", "modulename": "SDSPy.generics.generics", "qualname": "SCPIGenerics.SetSRE", "kind": "function", "doc": "<p>PySDS [SetSRE] :   Write the ESR Register (Service Request Enable Register)</p>\n\n<pre><code>Arguments :\n    Integer : Value to be written\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.history", "modulename": "SDSPy.history", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.history.history", "modulename": "SDSPy.history.history", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.history.history.SiglentHistory", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory", "kind": "class", "doc": "<p>pySDS [History][SiglentHistory] :   Class herited from SiglentBase.\n                                    Store all command related the control of history display.</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (7):\n        EnableHistory :                 Enable history mode\n        DisableHistory :                Disable history mode\n        SetCurrentFrame :               Configure current frame\n        GetFrameAcquisitionTime :       GetAcquisitionTime for a defined frame\n        EnableHistoryList :             Enable List view\n        DisableHistoryList :            Disable List view\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.history.history.SiglentHistory.EnableHistory", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory.EnableHistory", "kind": "function", "doc": "<p>pySDS [History][EnableHistory] : Enable the History mode</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.history.history.SiglentHistory.DisableHistory", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory.DisableHistory", "kind": "function", "doc": "<p>pySDS [History][DisableHistory] : Disable the History mode</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.history.history.SiglentHistory.SetCurrentFrame", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory.SetCurrentFrame", "kind": "function", "doc": "<p>pySDS [History][SetCurrentFrame] : Configure the current frame where the data is stored</p>\n\n<pre><code>Arguments :\n    Number : Integer of the position. Generally between 0 and 7960, but upper value can be influed by hardware options, timebase or resolution.\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.history.history.SiglentHistory.GetFrameAcquisitionTime", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory.GetFrameAcquisitionTime", "kind": "function", "doc": "<p>pySDS [History][GetFrameAcquisitionTime] : Return the acquision time for this frame</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Duration under the form of a Python Time object (from Datetime package)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.history.history.SiglentHistory.EnableHistoryList", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory.EnableHistoryList", "kind": "function", "doc": "<p>pySDS [History][EnableHistoryList] : Enable the list mode</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.history.history.SiglentHistory.DisableHistoryList", "modulename": "SDSPy.history.history", "qualname": "SiglentHistory.DisableHistoryList", "kind": "function", "doc": "<p>pySDS [History][DisableHistoryList] : Disable the list mode</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.main", "modulename": "SDSPy.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.main.main", "modulename": "SDSPy.main", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths", "modulename": "SDSPy.maths", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.maths.maths", "modulename": "SDSPy.maths.maths", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.maths.maths.SiglentMaths", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths", "kind": "class", "doc": "<p>pySDS [Files][SiglentMaths] :   Class herited from SiglentBase.\n                                Store all command related the control of maths functions.</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (1) :\n        __init__ :                  Small overhide to add one variable\n\n    Public (12):\n        DefineMathOperation :       Configure math operation\n        EnableMathInvert :          Invert the output\n        DisableMathInvert :         De-Invert the output\n        SetMathVDIV :               Configure VDIV of math channel\n        SetMathVerticalPosition :   Set Math position\n        SetFFTCenter :              Set FFT Center\n        SetFTTDisplayMode :         Set FFT Display mode\n        SetFFTVerticalPosition :    Set FFT Position\n        SetFFTVerticalScale :       Set FFT Scale\n        SetFFTHorizontalScale :     Set FFT Horizontal scale\n        SetFFTVerticalUnit :        Set FFT Unit\n        SetFFTWindow :              Set FFT Unit\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.__init__", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.__init__", "kind": "function", "doc": "<p>Small overhide to add a variable to the class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span>, </span><span class=\"param\"><span class=\"n\">baseclass</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.DefineMathOperation", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.DefineMathOperation", "kind": "function", "doc": "<p>pySDS [Maths][DefineMathOperation] : Configure math operation to do.</p>\n\n<pre><code>Arguments :\n    Equation : Human written operation\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Equation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.EnableMathInvert", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.EnableMathInvert", "kind": "function", "doc": "<p>pySDS [Math][EnableMathInvert] : Invert the trace of the math result</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.DisableMathInvert", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.DisableMathInvert", "kind": "function", "doc": "<p>pySDS [Math][EnableMathInvert] : Disable inversion the trace of the math result</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetMathVDIV", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetMathVDIV", "kind": "function", "doc": "<p>pySDS [Math][SetMathVDIV] : Configure the vertical scale of the math channel</p>\n\n<pre><code>Arguments :\n    Unit : 500uV | 1mV | 2mV | 5mV | 10mV | 20mV | 50mV | 100mV | 200mV | 500mV | 1V | 2V | 5V | 10V | 20V | 50V | 100V\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid unit\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Unit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetMathVerticalPosition", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetMathVerticalPosition", "kind": "function", "doc": "<p>pySDS [Math][SetMathVerticalPosition] : Configure the position of the math</p>\n\n<pre><code>Arguments :\n    Offset : Value in uV / mV / V to be offseted on the math signal\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Out of range value (for this VDIV)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFFTCenter", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFFTCenter", "kind": "function", "doc": "<p>pySDS [Math][SetFFTCenter] : Configure the FFT Center point</p>\n\n<p>WARNING : It's not possible to check the value here</p>\n\n<pre><code>Arguments :\n    Value in Hz | kHz | MHz\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFTTDisplayMode", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFTTDisplayMode", "kind": "function", "doc": "<p>pySDS [Math][SetFFTDisplayMode] : Configure the mode of display of the FFT</p>\n\n<pre><code>Arguments :\n    Mode : ON | OFF | EXCLU\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Value not allowed\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFFTVerticalPosition", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFFTVerticalPosition", "kind": "function", "doc": "<p>pySDS [Math][SetFFTVerticalPosition] : Configure the VPOS of the FFT</p>\n\n<pre><code>Arguments :\n    Offset : Value in Volts\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Out of range value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFFTVerticalScale", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFFTVerticalScale", "kind": "function", "doc": "<p>pySDS [Math][SetFFTVerticalScale] : Set the FFT scale</p>\n\n<p>WARNING : Due to the option of two units, some values may be valid but not for this specific mode. VRMS is more restrictive.</p>\n\n<pre><code>Arguments :\n    Scale : Value to be used\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Out of range value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFFTHorizontalScale", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFFTHorizontalScale", "kind": "function", "doc": "<p>pySDS [Math][SetFFTHorizontalScale] : Set the horizontal division of the FFT trace</p>\n\n<p>WARNING : It's not possible to check the value here</p>\n\n<pre><code>Arguments :\n    Scale : in Hz | kHz | Mhz with unit\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFFTVerticalUnit", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFFTVerticalUnit", "kind": "function", "doc": "<p>pySDS [Math][SetFFTVerticalUnit] : Set the FFT unit. This function shall be called first when configuring FFT</p>\n\n<pre><code>Arguments :\n    Unit : VRMS | DBM | DBVRMS\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Unit\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Unit</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.maths.maths.SiglentMaths.SetFFTWindow", "modulename": "SDSPy.maths.maths", "qualname": "SiglentMaths.SetFFTWindow", "kind": "function", "doc": "<p>pySDS [Math][SetFFTWindow] : Configure the FFT Window to be used</p>\n\n<pre><code>Arguments :\n    Window : RECT | BLAC | HANN | HAMM | FLATTOP\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Window\n</code></pre>\n\n<p>Doc from siglent :\n    RECT \u2014 Rectangle is useful for transient signals, and signals where there are an integral number of cycles in the time record.\n    BLAC \u2014 Blackman reduces time resolution compared to the rectangular window, but it improves the capacity to detect smaller impulses due to lower secondary lobes (provides minimal spectral leakage).\n    HANN \u2014 Hanning is useful for frequency resolution and general purpose use. It is good for resolving two frequencies that are close together, or for making frequency measurements.\n    HAMM \u2014 Hamming.\n    FLATTOP \u2014 Flattop is the best for making accurate amplitude measurements of frequency peaks</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure", "modulename": "SDSPy.measure", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.measure.measure", "modulename": "SDSPy.measure.measure", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure", "kind": "class", "doc": "<p>pySDS [Files][SiglentMeasure] : Class herited from SiglentBase.\n                                Store all command related the control of automated measures</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (14):\n        GetSignalFrequency :            Get triggering signal frequency\n        SetDelayMeasure :               Configure delay measure\n        GetDelayMeasure :               Read delay measure\n        SetMeasure :                    Configure measure\n        GetMeasure :                    Read measure\n        EnableMeasureStatistics :       Enable statistics\n        DisableMeasureStatistics :      Disable statistics\n        ResetMeasureStatistics :        Reset statistics\n        RemoveMeasures :                Remove all measures\n        GetStatsMeasure :               Read measures (with statistics)\n        EnableMeasureGating :           Enable measure gating (restraint the measure to a part of the waveform)\n        DisableMeasureGating :          Disable measure gating\n        SetGatingLowerLimit :           Configure lower limit for gating\n        SetGatingHigherLimit :          Configure higher limit for gating\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.GetSignalFrequency", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.GetSignalFrequency", "kind": "function", "doc": "<p>pySDS [Measure][GetSignalFrequency] : Get the number of trigger crossing per seconds, in Hz.</p>\n\n<p>WARNING : Measure only the trigger channel.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Measure, in Hz.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.SetDelayMeasure", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.SetDelayMeasure", "kind": "function", "doc": "<p>pySDS [Measure][SetDelayMeasure] : Configure a time related measurement</p>\n\n<p>WARNING : This function shall be called before calling the Get function.</p>\n\n<pre><code>Arguments :\n    Type :      Type of mesure. PHA | FRR | FRF | FFR | FFF | LRR | LRF | LFR | LFF | SKEW\n    Channel1 :  Siglent channel for the source 1\n    Channel2 :  Siglent channel for the source 2\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid type\n    -2 : Invalid Channel1 class\n    -3 : Invalid Channel2 class\n\nAvailable measures :\n    PHA :The phase difference between two channels. (rising edge - rising edge)\n    FRR Delay between two channels. (first rising edge - first rising edge)\n    FRF Delay between two channels. (first rising edge - first falling edge)\n    FFR Delay between two channels. (first falling edge - first rising edge)\n    FFF Delay between two channels. (first falling edge - first falling edge)\n    LRR Delay between two channels. (first rising edge - last rising edge)\n    LRF Delay between two channels. (first rising edge - last falling edge)\n    LFR Delay between two channels. (first falling edge - last rising edge)\n    LFF Delay between two channels. (first falling edge - last falling edge)\n    SKEW Delay between two channels. (edge to edge of the same type)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">Channel1</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span>,</span><span class=\"param\">\t<span class=\"n\">Channel2</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.GetDelayMeasure", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.GetDelayMeasure", "kind": "function", "doc": "<p>pySDS [Measure][GetDelayMeasure] : Read the value of a measure (and maybe set it ??)</p>\n\n<pre><code>Arguments :\n    Type :      Type of mesure. (See list linked)\n    Channel1 :  SiglentChannel for the source 1\n    Channel2 :  SiglentChannel for the source 2\n\nReturns :\n    The value read, or if negative :\n    -1 : Invalid type\n    -2 : Invalid Channel1 class\n    -3 : Invalid Channel2 class\n\nAvailable measures :\n    PHA :The phase difference between two channels. (rising edge - rising edge)\n    FRR Delay between two channels. (first rising edge - first rising edge)\n    FRF Delay between two channels. (first rising edge - first falling edge)\n    FFR Delay between two channels. (first falling edge - first rising edge)\n    FFF Delay between two channels. (first falling edge - first falling edge)\n    LRR Delay between two channels. (first rising edge - last rising edge)\n    LRF Delay between two channels. (first rising edge - last falling edge)\n    LFR Delay between two channels. (first falling edge - last rising edge)\n    LFF Delay between two channels. (first falling edge - last falling edge)\n    SKEW Delay between two channels. (edge to edge of the same type)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">Channel1</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span>,</span><span class=\"param\">\t<span class=\"n\">Channel2</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.SetMeasure", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.SetMeasure", "kind": "function", "doc": "<p>pySDS [Measure][SetMeasure] : Install a new measure</p>\n\n<pre><code>Arguments :\n    Type :      The measure to be done (see list at the end of the doc)\n    Channel :   SiglentChannel to be measured\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid type\n    -2 : Invalid Channel type\n\nAvailable measures :\n    PKPK : vertical peak-to-peak\n    MAX : maximum vertical value\n    MIN : minimum vertical value\n    AMPL : vertical amplitude\n    TOP : waveform top value\n    BASE : waveform base value\n    CMEAN : average value in the first cycle\n    MEAN : average value\n    STDEV : standard deviation of the data\n    VSTD : standard deviation of the data in the first cycle\n    RMS : RMS value\n    CRMS : RMS value in the first cycle\n    OVSN : overshoot of a falling edge\n    FPRE : preshoot of a falling edge\n    OVSP : overshoot of a rising edge\n    RPRE : preshoot of a rising edge\n    LEVELX : Level measured at trigger position\n    PER : period\n    FREQ : frequency\n    PWID : positive pulse width\n    NWID : negative pulse width\n    RISE : rise-time\n    FALL : fall-time\n    WID : Burst width\n    DUTY : positive duty cycle\n    NDUTY : negative duty cycle\n    DELAY : time from the trigger to the first transition at the 50% crossing\n    TIMEL : time from the trigger to each rising edge at the 50% crossing\n    ALL : All measurements snapshot, equal to turn on the switch of all measure\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.GetMeasure", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.GetMeasure", "kind": "function", "doc": "<p>pySDS [Measure][GetMeasure] : Read a measure</p>\n\n<pre><code>Arguments :\n    Type :      The measure to be done (see list at the end of the doc)\n    Channel :   SiglentChannel to be measured\n\nReturns :\n    dict with measure name and value.\n    Errors are reaturned under the error key.\n\nAvailable measures :\n    PKPK : vertical peak-to-peak\n    MAX : maximum vertical value\n    MIN : minimum vertical value\n    AMPL : vertical amplitude\n    TOP : waveform top value\n    BASE : waveform base value\n    CMEAN : average value in the first cycle\n    MEAN : average value\n    STDEV : standard deviation of the data\n    VSTD : standard deviation of the data in the first cycle\n    RMS : RMS value\n    CRMS : RMS value in the first cycle\n    OVSN : overshoot of a falling edge\n    FPRE : preshoot of a falling edge\n    OVSP : overshoot of a rising edge\n    RPRE : preshoot of a rising edge\n    LEVELX : Level measured at trigger position\n    PER : period\n    FREQ : frequency\n    PWID : positive pulse width\n    NWID : negative pulse width\n    RISE : rise-time\n    FALL : fall-time\n    WID : Burst width\n    DUTY : positive duty cycle\n    NDUTY : negative duty cycle\n    DELAY : time from the trigger to the first transition at the 50% crossing\n    TIMEL : time from the trigger to each rising edge at the 50% crossing\n    ALL : All measurements snapshot, equal to turn on the switch of all measure\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.EnableMeasureStatistics", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.EnableMeasureStatistics", "kind": "function", "doc": "<p>pySDS [Measure][EnableMeasureStatistics] : Enable measurement stats</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.DisableMeasureStatistics", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.DisableMeasureStatistics", "kind": "function", "doc": "<p>pySDS [Measure][DisableMeasureStatistics] : Disable measurement stats</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.ResetMeasureStatistics", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.ResetMeasureStatistics", "kind": "function", "doc": "<p>pySDS [Measure][ResetMeasureStatistics] : Reset measurement stats values</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.RemoveMeasures", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.RemoveMeasures", "kind": "function", "doc": "<p>pySDS [Measure][RemoveMeasures] : Remove installed measures</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.GetStatsMeasure", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.GetStatsMeasure", "kind": "function", "doc": "<p>pySDS [Measure][GetStatsMeasure] : Read the statistics for a measure.</p>\n\n<p>WARNING : This function need statistics to be enabled !\nWARNING2 : The ID of the measure</p>\n\n<pre><code>Arguments :\n    NumberOfMeasures : The number of measured stats wanted.\n\nReturns :\n    dict with measure name and value.\n    Errors are reaturned under the error key.\n\nErrors codes :\n    -1 : Invalid Number of measures. Must be between 1 and 5\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">MeasureID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.EnableMeasureGating", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.EnableMeasureGating", "kind": "function", "doc": "<p>pySDS [Measure][EnableMeasureGating] : Enable measurement gating, to only consider a small part of the waveform</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.DisableMeasureGating", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.DisableMeasureGating", "kind": "function", "doc": "<p>pySDS [Measure][DisableMeasureGating] : Disable measurement gating.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.SetGatingLowerLimit", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.SetGatingLowerLimit", "kind": "function", "doc": "<p>pySDS [Measure][SetGatingLowerLimit] : Set lower gating time.</p>\n\n<p>WARNING : This value can't be greater than Higher limit. No checks are done !</p>\n\n<pre><code>Arguments :\n    Time : Value of time to be used, in seconds.\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Time</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.measure.measure.SiglentMeasure.SetGatingHigherLimit", "modulename": "SDSPy.measure.measure", "qualname": "SiglentMeasure.SetGatingHigherLimit", "kind": "function", "doc": "<p>pySDS [Measure][SetGatingLowerLimit] : Set higher gating time.</p>\n\n<p>WARNING : This value can't be lower than Lower limit. No checks are done !</p>\n\n<pre><code>Arguments :\n    Time : Value of time to be used, in seconds.\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Time</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail", "modulename": "SDSPy.passfail", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.passfail.passfail", "modulename": "SDSPy.passfail.passfail", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail", "kind": "class", "doc": "<p>pySDS [Files][SiglentPassFail] :    Class herited from SiglentBase.\n                                    Store all command related the control of automated tests</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (14):\n        ClearTests :                    Clear tests results\n        EnableBuzzerOnFail :            Enable buzzer\n        DisableBuzzerOnFail :           Disable buzzer\n        CreateRule :                    Create new rule\n        GetFramesResults :              Get results\n        EnableInformationDisplay :      Show infos on screen\n        DisableInformationDisplay :     Hide infos on screen\n        EnablePassFailMode :            Enable mode\n        DisablePassFailMode :           Disable mode\n        EnableStopOnFail :              Enable stop on fail\n        DisableStopOnFail :             Disable stop on fail\n        Runtest :                       Run the test\n        Stoptest :                      Stop the test\n        SetSource :                     Set source\n        SetTolerances :                 Configure tolerances\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.ClearTests", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.ClearTests", "kind": "function", "doc": "<p>pySDS [PassFail][ClearTests] : Clear the results of the test</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.EnableBuzzerOnFail", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.EnableBuzzerOnFail", "kind": "function", "doc": "<p>pySDS [PassFail][EnableBuzzerOnFail] : Enable the buzzer when a fail is detected</p>\n\n<p>WARNING : The documentation is not clear about the real usage of this function. Use at your own risks !</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.DisableBuzzerOnFail", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.DisableBuzzerOnFail", "kind": "function", "doc": "<p>pySDS [PassFail][DisableBuzzerOnFail] : Disable the buzzer when a fail is detected</p>\n\n<p>WARNING : The documentation is not clear about the real usage of this function. Use at your own risks !</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.CreateRule", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.CreateRule", "kind": "function", "doc": "<p>pySDS [PassFail][CreateRule] : Create a pass fail test around the selected channel.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.GetFramesResults", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.GetFramesResults", "kind": "function", "doc": "<p>pySDS [PassFail][GetFramesResults] : Return the number of frames that passed the test, failed and total</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    List of values : Failed, Passed, Total\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.EnableInformationDisplay", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.EnableInformationDisplay", "kind": "function", "doc": "<p>pySDS [PassFail][EnableInformationDisplay] : Enable on the screen the information panel</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.DisableInformationDisplay", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.DisableInformationDisplay", "kind": "function", "doc": "<p>pySDS [PassFail][DisableInformationDisplay] : Disable on the screen the information panel</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.EnablePassFailMode", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.EnablePassFailMode", "kind": "function", "doc": "<p>pySDS [PassFail][EnablePassFailMode] : Enable the pass/fail mode on the scope</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.DisablePassFailMode", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.DisablePassFailMode", "kind": "function", "doc": "<p>pySDS [PassFail][DisablePassFailMode] : Disable the pass/fail mode on the scope</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.EnableStopOnFail", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.EnableStopOnFail", "kind": "function", "doc": "<p>pySDS [PassFail][EnableStopOnFail] : Stop the scope once the first fail has been detected</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.DisableStopOnFail", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.DisableStopOnFail", "kind": "function", "doc": "<p>pySDS [PassFail][DisableStopOnFail] : Do not stop the scope once the first fail has been detected</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.Runtest", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.Runtest", "kind": "function", "doc": "<p>pySDS [PassFail][RunTest] : Launch the test execution</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.Stoptest", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.Stoptest", "kind": "function", "doc": "<p>pySDS [PassFail][Stoptest] : Stop the test execution</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.SetSource", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.SetSource", "kind": "function", "doc": "<p>pySDS [PassFail][SetSource] : Set the source for the selftest</p>\n\n<pre><code>Arguments :\n    Channel : SiglentChannel class to be used\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid channel descriptor\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.passfail.passfail.SiglentPassFail.SetTolerances", "modulename": "SDSPy.passfail.passfail", "qualname": "SiglentPassFail.SetTolerances", "kind": "function", "doc": "<p>pySDS [PassFail][SetTolerances] : Set the X and Y tolerances for this source (Tolerances are expressed as on screen DIV)</p>\n\n<pre><code>Arguments :\n    X : X tolerance (between 0.04 and 4)\n    Y : Y tolerance (between 0.04 and 4)\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid X tolerance\n    -2 : Invalid Y tolerance\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS", "modulename": "SDSPy.pySDS", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS", "modulename": "SDSPy.pySDS", "qualname": "PySDS", "kind": "class", "doc": "<p>PySDS [class] : Parent class of the PySDS package.\n                Handle actually all of basic SCPI commands, and call subclasses for some advanced functionnalities !</p>\n\n<pre><code>Attributes :\n    Private :\n        __ip__ :            ip of the device. Used internally to check it's validity.\n        __rm__ :            pyvisa ressource manager\n        __instr__ :         Handle to the pyvisa object to interract with the device\n        __ConfigFile__ :    Configuration file used for the scope.\n        __Config__ :        Parsed configuration toml file\n        __Generics__ :      SCPIGenerics class. Used for low level interraction with the device.\n\n    Public :\n        ** Standard variables **\n        DeviceOpenned :     Get a non 0 value if the device was openned correctly. Otherwise, take 0\n        model :             Device model, parsed from *IDN command\n        SN :                Device SN, parsed from *IDN command\n        Firmware :          Device firmware revision, parsed from *IDN command\n\n        ** SCPI Variables **\n        Channel :           A list of channel presents on the device. Each is it's own SiglentChannel class.\n        Trigger :           A SiglentTrigger class\n\n\n\nMethods :\n    Private :\n\n    Public :\n\nParents :\n    None\n\nSubclass :\n    None\n</code></pre>\n"}, {"fullname": "SDSPy.pySDS.PySDS.__init__", "modulename": "SDSPy.pySDS", "qualname": "PySDS.__init__", "kind": "function", "doc": "<p>PySDS [init] :  Initialize the class.\n                Use some configuration file to initialize properly the oscilloscope, and read it's actual state to make sure to fetch the real state\n                May take some time since a lot of network requests are done here !</p>\n\n<pre><code>Arguments :\n    IP : A string IP address, version 4 of where the ressource shall be allocated\n\nReturns :\n    None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">IP</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "SDSPy.pySDS.PySDS.model", "modulename": "SDSPy.pySDS", "qualname": "PySDS.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.SN", "modulename": "SDSPy.pySDS", "qualname": "PySDS.SN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Firmware", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Firmware", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Channel", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Channel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Acquistion", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Acquistion", "kind": "variable", "doc": "<p>SiglentAcquisition subclass. Check dedicated documentation :<code>SDSPy.acquisition.SiglentAcquisition</code></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Autotest", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Autotest", "kind": "variable", "doc": "<p>SiglentPassFail subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Communication", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Communication", "kind": "variable", "doc": "<p>SiglentCommunication subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Cursor", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Cursor", "kind": "variable", "doc": "<p>SiglentCursor subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Decode", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Decode", "kind": "variable", "doc": "<p>SiglentDecode subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Digital", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Digital", "kind": "variable", "doc": "<p>SiglentDigital subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Display", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Display", "kind": "variable", "doc": "<p>SiglentScreen subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Files", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Files", "kind": "variable", "doc": "<p>SiglentFiles subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.History", "modulename": "SDSPy.pySDS", "qualname": "PySDS.History", "kind": "variable", "doc": "<p>SiglentHistory subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Maths", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Maths", "kind": "variable", "doc": "<p>SiglentMaths subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Measure", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Measure", "kind": "variable", "doc": "<p>SiglentMeasure subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Reference", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Reference", "kind": "variable", "doc": "<p>SiglentReference subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Trigger", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Trigger", "kind": "variable", "doc": "<p>SiglentTrigger subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Timebase", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Timebase", "kind": "variable", "doc": "<p>SiglentTimebase subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.Waveform", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Waveform", "kind": "variable", "doc": "<p>SiglentWaveform subclass. Check dedicated documentation</p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.DeviceOpenned", "modulename": "SDSPy.pySDS", "qualname": "PySDS.DeviceOpenned", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.pySDS.PySDS.GetAllStatus", "modulename": "SDSPy.pySDS", "qualname": "PySDS.GetAllStatus", "kind": "function", "doc": "<p>PySDS [GetAllStatus] :  Return the status of the STB, ESR, INR, DDR, CMD, EXR and URR Registers.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    List of integers with the values in order\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.EnableBuzzer", "modulename": "SDSPy.pySDS", "qualname": "PySDS.EnableBuzzer", "kind": "function", "doc": "<p>PySDS [EnableBuzzer] :  Enable the device buzzer</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.DisableBuzzer", "modulename": "SDSPy.pySDS", "qualname": "PySDS.DisableBuzzer", "kind": "function", "doc": "<p>PySDS [DisableBuzzer] : Disable the device buzzer</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.GetBuzzerEnablingState", "modulename": "SDSPy.pySDS", "qualname": "PySDS.GetBuzzerEnablingState", "kind": "function", "doc": "<p>PySDS [GetBuzzerEnablingState] :    Return the buzzer enabling state (ON or OFF)</p>\n\n<p>Arguments :\n    None</p>\n\n<p>Returns :\n    True | False</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.Calibrate", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Calibrate", "kind": "function", "doc": "<p>PySDS [Calibrate] : Calibrate the device.\n                    This is actually the fast one, which does not do a full analog frontend calibration.</p>\n\n<p>WARNING :   Leaving probes and other elements connected may affect the result.\n            Make sure to calibrate the device in proper conditions !</p>\n\n<p>Arguments :\n    None</p>\n\n<p>Returns :\n    Integer : If 0, then calibration was sucessfull.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.Autoset", "modulename": "SDSPy.pySDS", "qualname": "PySDS.Autoset", "kind": "function", "doc": "<p>pySDS [Autoset] : Launch an autoset procedure</p>\n\n<p>WARNING :   This should be avoided as possible, since the autoset isn't the most reliable thing in the world.\n            It's possible that the scope will show a detail of the waweform where there is some others things to be seen.\n            Use in a maximal number of case the manual settings to precisely control the predicted signal</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() : List of errors that occured\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.LockDevicePanel", "modulename": "SDSPy.pySDS", "qualname": "PySDS.LockDevicePanel", "kind": "function", "doc": "<p>PySDS [LockDevicePanel] : Lock the device front panel to prevent any actions of the user</p>\n\n<p>WARNING : This command seems to exhibit some weird response and no action at all on an SDS824X-HD</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.UnlockDevicePanel", "modulename": "SDSPy.pySDS", "qualname": "PySDS.UnlockDevicePanel", "kind": "function", "doc": "<p>PySDS [UnlockDevicePanel] : Unlock the device front panel to enable any actions of the user</p>\n\n<p>WARNING : This command seems to exhibit some weird response and no action at all on an SDS824X-HD</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.GetDevicePanelLockState", "modulename": "SDSPy.pySDS", "qualname": "PySDS.GetDevicePanelLockState", "kind": "function", "doc": "<p>PySDS [GetDevicePanelLockState] : Return the status of the lock on the front panel</p>\n\n<p>WARNING : This command seems to exhibit some weird response and no action at all on an SDS824X-HD</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Boolean : Lock (True) or not (False)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.RecallPreset", "modulename": "SDSPy.pySDS", "qualname": "PySDS.RecallPreset", "kind": "function", "doc": "<p>PySDS [RecallPreset] :  Apply a previously stored list of settings on the device.\n                        Can only be called after the call of SavePreset function !\n                        If 0 is passed, this is the default config.</p>\n\n<pre><code>Argument :\n    PresentNumber : Integer of the position to store the preset\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n    or\n    -1 : Invalid preset ID\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">PresetNumber</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.SavePresent", "modulename": "SDSPy.pySDS", "qualname": "PySDS.SavePresent", "kind": "function", "doc": "<p>PySDS [SavePresent] :   Store the settings of the device into a defined non volatile memory location.\n                        Number 0 is not valid, since this location is the default preset.</p>\n\n<pre><code>Argument :\n    PresentNumber : Integer of the position to store the preset\n\nReturns :\n    self.GetAllErrors() returns (List of errors)\n    or\n    -1 : Invalid preset ID\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">PresetNumber</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.ResetDevice", "modulename": "SDSPy.pySDS", "qualname": "PySDS.ResetDevice", "kind": "function", "doc": "<p>PySDS [ResetDevice] : Perform a software reset of the device</p>\n\n<p>Arguments :\n    None</p>\n\n<p>Returns :\n    self.GetAllErrors() returns (List of errors)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.GetAllErrors", "modulename": "SDSPy.pySDS", "qualname": "PySDS.GetAllErrors", "kind": "function", "doc": "<p>PySDS [GetAllErrors] :  Read the device errors, and until at least one error exist, continue to read it.\n                        For each errors, it will be printed in console and returned on a list, with it's lengh in first position.</p>\n\n<pre><code>                    This function also trigger a reading of the status of the device to detect if value where adapted or cancelled.\n\nArguments :\n    print : Shall we print the decoded output on the console ? Default to false.\n\nReturns :\n    List :\n        Index 0 :       Number of errors that occured\n        Index 1 - n :   Device errors codes\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">print</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.GetDeviceStatus", "modulename": "SDSPy.pySDS", "qualname": "PySDS.GetDeviceStatus", "kind": "function", "doc": "<p>PySDS [GetDeviceStatus] :   Read the device status, and parse it to be easier for the user to read !</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    List of lenght 16, for each bit\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.pySDS.PySDS.GetDeviceOptions", "modulename": "SDSPy.pySDS", "qualname": "PySDS.GetDeviceOptions", "kind": "function", "doc": "<p>PySDS [GetDeviceOptions] :  Return the list of the installed device options.\n                            Function isn't working for now, but the response seems correct.\n                            --> Return 0 where it shall return OPC 0...</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    List of String for all options\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references", "modulename": "SDSPy.references", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.references.references", "modulename": "SDSPy.references.references", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.references.references.SiglentReference", "modulename": "SDSPy.references.references", "qualname": "SiglentReference", "kind": "class", "doc": "<p>pySDS [Files][SiglentReference] :   Class herited from SiglentBase.\n                                    Store all command related the control of reference channel selection</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (8):\n    CloseReference :                Close the reference functions package\n    EnableDisplayOfReference :      Enable display\n    DisableDisplayOfReference :     Disable display\n    SetReferenceLocation :          Set location of the reference (A, B, C, D)\n    SetReferenceOffset :            Set reference offset\n    SaveWaveformAsReference :       Save waveform as reference\n    SetReferenceScale :             Set reference scale\n    SetReferenceSource :            Set reference source\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.references.references.SiglentReference.CloseReference", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.CloseReference", "kind": "function", "doc": "<p>pySDS [Reference][CloseReference] : Close the reference function on the device</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.EnableDisplayOfReference", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.EnableDisplayOfReference", "kind": "function", "doc": "<p>pySDS [Reference][EnableDisplayOfReference] : Display the used reference on the screen</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.DisableDisplayOfReference", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.DisableDisplayOfReference", "kind": "function", "doc": "<p>pySDS [Reference][DisableDisplayOfReference] : Hide the used reference on the screen</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.SetReferenceLocation", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.SetReferenceLocation", "kind": "function", "doc": "<p>pySDS [Reference][SetReferenceLocation] : Set the location of the actual reference</p>\n\n<pre><code>Arguments :\n    Location : A | B | C | D\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid location\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Location</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.SetReferenceOffset", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.SetReferenceOffset", "kind": "function", "doc": "<p>pySDS [Reference][SetReferenceOffset] : Apply an offset on the reference display</p>\n\n<pre><code>Arguments :\n    Offset : The offset in volts\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.SaveWaveformAsReference", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.SaveWaveformAsReference", "kind": "function", "doc": "<p>pySDS [Reference][SaveWaveformAsReference] : Save the current channel source on the current reference location</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.SetReferenceScale", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.SetReferenceScale", "kind": "function", "doc": "<p>pySDS [Reference][SetReferenceScale] : Set the display reference scale</p>\n\n<pre><code>Arguments :\n    Scale : The unit in volts (500uV - 10V)\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid scale\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.references.references.SiglentReference.SetReferenceSource", "modulename": "SDSPy.references.references", "qualname": "SiglentReference.SetReferenceSource", "kind": "function", "doc": "<p>pySDS [Reference][SetReferenceSource] : Set the reference channel to be used</p>\n\n<pre><code>Arguments :\n    Channel : SiglentChannel to be used (or MATH)\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span><span class=\"p\">:</span> <span class=\"n\">SDSPy</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">SiglentChannel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.timebase", "modulename": "SDSPy.timebase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.timebase.timebase", "modulename": "SDSPy.timebase.timebase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase", "kind": "class", "doc": "<p>pySDS [Files][SiglentTimebase] :    Class herited from SiglentBase.\n                                    Store all command related the control of timebase on the display</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (7):\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase.GetTimeDiv", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase.GetTimeDiv", "kind": "function", "doc": "<p>pySDS [Timebase][GetTimeDiv] : Return the time division used</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Time division used in seconds\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase.SetTimeDiv", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase.SetTimeDiv", "kind": "function", "doc": "<p>pySDS [Timebase][SetTimeDiv] : Configure the timebase used</p>\n\n<pre><code>Arguments :\n    Timebase : Base to be used (from defined list right after)\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid timebase\n\nPossibles timebases :\n    1NS 2NS 5NS\n    10NS 20NS 50NS\n    100NS 200NS 500NS\n    1US 2US 5US\n    10US 20US 50US\n    100US 200US 500US\n    1MS 2MS 5MS\n    10MS 20MS 50MS\n    100MS 200MS 500MS\n    1S 2S 5S\n    10S 20S 50S\n    100S\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Timebase</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase.GetTriggerOffset", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase.GetTriggerOffset", "kind": "function", "doc": "<p>pySDS [TimeBase][GetTriggerOffset] : Return the delay between trigger and center point</p>\n\n<ul>\n<li>Pre-trigger acquisition \u2014 Data acquired before the trigger occurs. Negative trigger delays must be given in seconds.</li>\n<li><p>Post-trigger acquisition \u2014 Data acquired after the trigger has occurred</p>\n\n<p>Arguments :\n    None</p>\n\n<p>Returns :\n    Time in seconds</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase.SetTriggerOffset", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase.SetTriggerOffset", "kind": "function", "doc": "<p>pySDS [TimeBase][SetTriggerOffset] : Offset the delay between trigger and center point.</p>\n\n<ul>\n<li>Pre-trigger acquisition \u2014 Data acquired before the trigger occurs. Negative trigger delays must be given in seconds.</li>\n<li><p>Post-trigger acquisition \u2014 Data acquired after the trigger has occurred</p>\n\n<p>Arguments :\n    Offset : Delay in seconds to offset</p>\n\n<p>Returns :\n    self.GetAllErrors()</p></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Offset</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase.SetMagnifierZoom", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase.SetMagnifierZoom", "kind": "function", "doc": "<p>pySDS [TimeBase][SetMagnifierZoom] : Configure the zoom on the screen.</p>\n\n<pre><code>Arguments :\n    Zoom : Two options (depending on the device !) :\n        - Time with units, from 1NS to current timebase (only checked globally, not for actual settings) ==&gt; Pass an str type\n        - Factor, from 1 to 2 000 000 (Older !) ==&gt; Pass a non str type\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid zoom\n\nPossibles timebases :\n    1NS 2NS 5NS\n    10NS 20NS 50NS\n    100NS 200NS 500NS\n    1US 2US 5US\n    10US 20US 50US\n    100US 200US 500US\n    1MS 2MS 5MS\n    10MS 20MS 50MS\n    100MS 200MS 500MS\n    1S 2S 5S\n    10S 20S 50S\n    100S\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Zoom</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.timebase.timebase.SiglentTimebase.SetMagnifierPosition", "modulename": "SDSPy.timebase.timebase", "qualname": "SiglentTimebase.SetMagnifierPosition", "kind": "function", "doc": "<p>pySDS [TimeBase][SetMagnifierPosition] : Place the zoom position</p>\n\n<pre><code>Arguments :\n    Two options (depending on the device) :\n        - Time position, with units. ==&gt; Pass an str type\n        - Div factor (older !) ==&gt; Pass an non str type\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Position\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger", "modulename": "SDSPy.trigger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.CAN", "modulename": "SDSPy.trigger.CAN", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN", "kind": "class", "doc": "<p>pySDS [Trigger][SiglentCAN] :   Class herited from SiglentBase.\n                                Store all command related the control of the triggering system for the CAN bus</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (7):\n        SetTriggerOnCANH :          Set trigger Pin.\n        SetTriggerOnCondition :     Set trigger on a condition\n        ConfigureTriggerID :        Set trigger ID\n        ConfigureTriggerIDLen :     Set trigger ID Len\n        ConfigureTriggerData1 :     Set trigger first byte\n        ConfigureTriggerData2 :     Set trigger second byte\n        SetTriggerBaud :            Set trigger baud\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.SetTriggerOnCANH", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.SetTriggerOnCANH", "kind": "function", "doc": "<p>pySDS [CAN][SetTriggerOnCANH] : Configure the trigger on the CANH pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the CANH pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.SetTriggerOnCondition", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.SetTriggerOnCondition", "kind": "function", "doc": "<p>pySDS [CAN][SetTriggerOnCondition] : Configure the trigger on a condition on the CAN Bus</p>\n\n<pre><code>Arguments :\n    Condition : START | REMOTE | ID | ID_AND_DATA | ERROR\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid condition\n\nPossibles conditions\n    START\u2014 Start condition.\n    REMOTE\u2014 Remote frame\n    ID\u2014 Specifies a search based on ID bits and ID.\n    ID_AND_DATA\u2014 Specify a search based on ID bits, ID and data.\n    ERROR\u2014 Error frame\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Condition</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.ConfigureTriggerID", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.ConfigureTriggerID", "kind": "function", "doc": "<p>pySDS [CAN][ConfigureTriggerID] : Set the ID for ID and ID_AND_DATA mode of trigger</p>\n\n<pre><code>Arguments :\n    ID : Integer between 0-2048 (11 bits) or 0-536870912 (29 bits)\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ID</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.ConfigureTriggerIDLen", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.ConfigureTriggerIDLen", "kind": "function", "doc": "<p>pySDS [CAN][ConfigureTriggerID] : Set the ID len for ID and ID_AND_DATA mode of trigger.</p>\n\n<pre><code>Arguments :\n    Len : 11BITS | 29BITS\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Len\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Len</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.ConfigureTriggerData1", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.ConfigureTriggerData1", "kind": "function", "doc": "<p>pySDS [CAN][ConfigureTriggerData1] : Configure the data (first byte) to be used to trigger for ID_AND_DATA mode.</p>\n\n<pre><code>Arguments :\n    Value: 0-255 value\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.ConfigureTriggerData2", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.ConfigureTriggerData2", "kind": "function", "doc": "<p>pySDS [CAN][ConfigureTriggerData2] : Configure the data (second byte) to be used to trigger for ID_AND_DATA mode.</p>\n\n<pre><code>Arguments :\n    Value: 0-255 value\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.CAN.SiglentCAN.SetTriggerBaud", "modulename": "SDSPy.trigger.CAN", "qualname": "SiglentCAN.SetTriggerBaud", "kind": "function", "doc": "<p>pySDS [CAN][SetTriggerBaud] : Set the baud rate of the UART comm</p>\n\n<pre><code>Arguments :\n    Baud : Value. (As a string for standard values, or as an integer for non standard)*\n\n    * Sending a standard as integer will be seen as custom but will also works fine !\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Baud\n\nStandard baud values :\n    5k\n    10k\n    20k\n    50k\n    100k\n    125k\n    250k\n    500k\n    800k\n    1M\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Baud</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC", "modulename": "SDSPy.trigger.IIC", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC", "kind": "class", "doc": "<p>pySDS [Trigger][SiglentIIC] :   Class herited from SiglentBase.\n                                Store all command related the control of the triggering system for the I2C bus</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (10):\n        SetTriggerOnSCL :               Set the trigger on the SCL Bus\n        SetTriggerOnSDA :               Set the trigger on the SDA Bus\n        SetTriggerOnCondition :         Set the trigger on advanced conditions\n        ConfigureTriggerAddress :       Set the trigger address condition\n        ConfigureTriggerData1 :         Set the trigger data 1 condition\n        ConfigureTriggerData2 :         Set the trigger data 2 condition\n        ConfigureTriggerQual :          Set the trigger eeprom qualifier condition\n        ConfigureTriggerRW :            Set the read / write condition\n        ConfigureTriggerAddressLen :    Set the address len condition\n        ConfigureTriggerDataLen :       Set the data len condition\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.SetTriggerOnSCL", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.SetTriggerOnSCL", "kind": "function", "doc": "<p>pySDS [IIC][SetTriggerOnSCL] : Configure the trigger on the SCL bus.</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the SCL pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.SetTriggerOnSDA", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.SetTriggerOnSDA", "kind": "function", "doc": "<p>pySDS [IIC][SetTriggerOnSDA] : Configure the trigger on the SDA bus.</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the SDA pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.SetTriggerOnCondition", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.SetTriggerOnCondition", "kind": "function", "doc": "<p>pySDS [IIC][SetTriggerOnCondition] : Set the trigger on a bus transfer condition</p>\n\n<p>WARNING : Once the condition is selected, further configuration may be needed.</p>\n\n<pre><code>Arguments :\n    Condition : The selected condition\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid condition\n\nPossibles conditions :\n    START : Start condition.\n    STOP : Stop condition.\n    RESTART : Another start condition occurs before a stop condition.\n    NOACK : Missing acknowledge.\n    EEPROM : EEPROM frame containing (Start:Controlbyte:R:Ack:Data).\n    7ADDA : 7-bit address frame containing (Start:Address7:R/W:Ack:Data:Data2).\n    10ADDA : 10-bit address frame containing (Start:Address10:R/W:Ack:Data:Data2).\n    DALENTH : specifie a search based on address lengthand data length.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Condition</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerAddress", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerAddress", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerAddress] : Set the trigger on a specific address on the bus (7ADDA or 10ADDA only)</p>\n\n<p>WARNING : A condition must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    Address : The device address, 0-128 or 0-1024 (7 or 10 bit address). Address is casted to integer prior device write.\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Address</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerData1", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerData1", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerData1] : Set the first byte of data on the bus to be filtered (7ADDA or 10ADDA only)</p>\n\n<p>WARNING : A condition must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    Data : The data, 0-256. Data is casted to integer prior device write.\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Data</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerData2", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerData2", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerData2] : Set the second byte of data on the bus to be filtered (7ADDA or 10ADDA only)</p>\n\n<p>WARNING : A condition must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    Data : The data, 0-256. Data is casted to integer prior device write.\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerQual", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerQual", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerQual] : Configure the qualifier on the bus (EEPROM mode only)</p>\n\n<p>WARNING : A condition  must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    Qaulifier : EQUAL | MORE | LESS\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid qualifier\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Qual</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerRW", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerRW", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerRW]: Configure the trigger to detect read or write operations</p>\n\n<p>WARNING : A condition must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    RW : READ | WRITE | DONT_CARE\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid RW\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">RW</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerAddressLen", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerAddressLen", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerAddressLen] : Configure the size of the address to be waited. (Data Len mode only)</p>\n\n<p>WARNING : A condition must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    Addr : 7BIT | 10BIT\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Address len\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Addr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.IIC.SiglentIIC.ConfigureTriggerDataLen", "modulename": "SDSPy.trigger.IIC", "qualname": "SiglentIIC.ConfigureTriggerDataLen", "kind": "function", "doc": "<p>pySDS [IIC][ConfigureTriggerDataLen] : Configure the number of byte in the message to trigger. (Data Len mode only)</p>\n\n<p>WARNING : A condition must be configured to access to this function</p>\n\n<pre><code>Arguments :\n    Len : Integer, between 1 and 12\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Len\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.LIN", "modulename": "SDSPy.trigger.LIN", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN", "kind": "class", "doc": "<p>pySDS [Trigger][SiglentLIN] :   Class herited from SiglentBase.\n                                Store all command related the control of the triggering system for the LIN bus</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (15):\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN.SetTriggerOnSRC", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN.SetTriggerOnSRC", "kind": "function", "doc": "<p>pySDS [LIN][SetTriggerOnSRC] : Configure the trigger on the LIN pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the LIN pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN.SetTriggerOnCondition", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN.SetTriggerOnCondition", "kind": "function", "doc": "<p>pySDS [LIN][SetTriggerOnCondition] : Configure the trigger on a condition on the CAN Bus</p>\n\n<pre><code>Arguments :\n    Condition : BREAK | DATA_ERROR | ID | ID_AND_DATA\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid condition\n\nPossibles conditions :\n    BREAK\u2014 Break condition.\n    ID\u2014 Specify a search based on ID.\n    ID_AND_DATA\u2014Specify a search based on ID and data.\n    DATA_ERROR\u2014 Error frame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Condition</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN.ConfigureTriggerID", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN.ConfigureTriggerID", "kind": "function", "doc": "<p>pySDS [LIN][ConfigureTriggerID] : Set the ID for ID and ID_AND_DATA mode of trigger</p>\n\n<pre><code>Arguments :\n    ID : Integer between 0-64\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid ID\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ID</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN.ConfigureTriggerData1", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN.ConfigureTriggerData1", "kind": "function", "doc": "<p>pySDS [LIN][ConfigureTriggerData1] : Configure the data (first byte) to be used to trigger for ID_AND_DATA mode.</p>\n\n<pre><code>Arguments :\n    Value: 0-255 value\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN.ConfigureTriggerData2", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN.ConfigureTriggerData2", "kind": "function", "doc": "<p>pySDS [LIN][ConfigureTriggerData2] : Configure the data (second byte) to be used to trigger for ID_AND_DATA mode.</p>\n\n<pre><code>Arguments :\n    Value: 0-255 value\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.LIN.SiglentLIN.SetTriggerBaud", "modulename": "SDSPy.trigger.LIN", "qualname": "SiglentLIN.SetTriggerBaud", "kind": "function", "doc": "<p>pySDS [LIN][SetTriggerBaud] : Set the baud rate of the UART comm</p>\n\n<pre><code>Arguments :\n    Baud : Value. (As a string for standard values, or as an integer for non standard)*\n\n    * Sending a standard as integer will be seen as custom but will also works fine !\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Baud\n\nStandard baud values :\n    600\n    1200\n    2400\n    4800\n    9600\n    19200\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Baud</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI", "modulename": "SDSPy.trigger.SPI", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI", "kind": "class", "doc": "<p>pySDS [Trigger][SiglentSPI] :   Class herited from SiglentBase.\n                                Store all command related the control of the triggering system for the SPI bus</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (15):\n        SetTriggerOnCLK :                   Set trigger on CLK Pin\n        SetTriggerClockEdge :               Set trigger edge (act also on bus decoding)\n        SetTriggerClockTimeout :            Set trigger timeout (act also on bus decoding)\n        SetTriggerOnMOSI :                  Set trigger on MOSI Pin\n        SetTriggerOnMISO :                  Set trigger on MISO Pin\n        SetTriggerCSType :                  Set trigger Type (act also on bus decoding)\n        SetTriggerOnCS :                    Set trigger on CS Pin\n        SetTriggerOnNCS :                   Set trigger on NCS Pin\n        ConfigureTriggerSource :            Set trigger Data Source\n        ConfigureTriggerDataSequence :      Set trigger data Sequence\n        ConfigureTriggerDataLen :           Set trigger Data Len\n        SetTriggerBitOrder :                Set trigger bit order (act also on bus decoding)\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerOnCLK", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerOnCLK", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerOnCLK] : Configure the trigger on the SCLK pin.</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the SCLK pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerClockEdge", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerClockEdge", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerClockEdge] : Configure the edge of the clock the data is latched on</p>\n\n<pre><code>Arguments :\n    Edge : RISING | FALLING. The edge used.\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid edge\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Edge</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerClockTimeout", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerClockTimeout", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerClockTimeout] : Set the timeout value (related to clock) when the CS is timeout.</p>\n\n<pre><code>Arguments :\n    Timeout : from 100ns to 500ms (no check done)\n\nReturns :\n    self.GetAllErrors()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Timeout</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerOnMOSI", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerOnMOSI", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerOnMOSI] : Configure the trigger on the MOSI pin.</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the MOSI pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerOnMISO", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerOnMISO", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerOnMISO] : Configure the trigger on the MOSI pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the MISO pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerCSType", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerCSType", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerCSType] : Set the CS type on the SPI bus</p>\n\n<pre><code>Arguments :\n    Type : CS | NCS | TIMEOUT\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid type\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerOnCS", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerOnCS", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerOnMISO] : Configure the trigger on the CS pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the CS pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerOnNCS", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerOnNCS", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerOnMISO] : Configure the trigger on the NCS pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the NCS pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.ConfigureTriggerSource", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.ConfigureTriggerSource", "kind": "function", "doc": "<p>pySDS [SPI][ConfigureTriggerSource] : Configure the trigger source for the SPI</p>\n\n<pre><code>Arguments :\n    Source : MOSI | MISO\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid source\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.ConfigureTriggerDataSequence", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.ConfigureTriggerDataSequence", "kind": "function", "doc": "<p>pySDS [SPI][ConfigureTriggerDataSequence] : Configure a matching bit sequence to trigger</p>\n\n<pre><code>Arguments :\n    Sequence : List of char / string : 0 | 1 | X to trigger. Len must match the datalen (not checked)\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid sequence (len not checked)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Sequence</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.ConfigureTriggerDataLen", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.ConfigureTriggerDataLen", "kind": "function", "doc": "<p>pySDS [SPI][ConfigureTriggerDataSequence] : Configure a matching data lenght to trigger</p>\n\n<pre><code>Arguments :\n    Len : 4-96\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Len\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.SPI.SiglentSPI.SetTriggerBitOrder", "modulename": "SDSPy.trigger.SPI", "qualname": "SiglentSPI.SetTriggerBitOrder", "kind": "function", "doc": "<p>pySDS [SPI][SetTriggerBitOrder] : Set the bit order on the SPI Bus</p>\n\n<pre><code>Arguments :\n    Order : MSB | LSB\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid order\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Order</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART", "modulename": "SDSPy.trigger.UART", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.UART.SiglentUART", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART", "kind": "class", "doc": "<p>pySDS [Trigger][SiglentUART] :  Class herited from SiglentBase.\n                                Store all command related the control of the triggering system for the UART bus</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (12):\n        SetTriggerOnRX :                Set trigger on RX Pin\n        SetTriggerOnTX :                Set trigger on TX Pin\n        SetTriggerDataSource :          Set used data source\n        SetTriggerCondition :           Set trigger condition\n        SetTriggerQualifier :           Set trigger qualifier\n        ConfigureTriggerData :          Set triggering data\n        SetTriggerBaud :                Set triggering baud (act also on bus decoding)\n        ConfigureTriggerDataLen :       Set trigger data len (act also on bus decoding)\n        ConfigureTriggerParity :        Set trigger parity (act also on bus decoding)\n        ConfigureTriggerPolarity :      Set trigger polarity (act also on bus decoding)\n        ConfigureTriggerStop :          Set trigger stop bits (act also on bus decoding)\n        ConfigureTriggerBitOrder :      Set trigger bit order (act also on bus decoding)\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.SetTriggerOnRX", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.SetTriggerOnRX", "kind": "function", "doc": "<p>pySDS [UART][SetTriggerOnRX] : Configure the trigger on the RX pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the RX pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.SetTriggerOnTX", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.SetTriggerOnTX", "kind": "function", "doc": "<p>pySDS [UART][SetTriggerOnTX] : Configure the trigger on the TX pin</p>\n\n<pre><code>Arguments :\n    Channel :       SiglentChannel or SiglentDCHannel related to the TX pin\n    Threshold :     For analog channel only, the used voltage. Default to 1.65\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Channel\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Threshold</span><span class=\"o\">=</span><span class=\"mf\">1.65</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.SetTriggerDataSource", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.SetTriggerDataSource", "kind": "function", "doc": "<p>pySDS [UART][SetTriggerDataSource] : Configure the used data source to trigger</p>\n\n<pre><code>Arguments :\n    Source : Data Source used RX | TX\n\nReturns :\n    self.GetAllErrors\n    or\n    -1 : Invalid Source\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.SetTriggerCondition", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.SetTriggerCondition", "kind": "function", "doc": "<p>pySDS [UART][SetTriggerCondition] : Set the trigger on a specific case</p>\n\n<pre><code>Arguments :\n    Condition : START | STOP | DATA | ERROR\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Condition\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Condition</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.SetTriggerQualifier", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.SetTriggerQualifier", "kind": "function", "doc": "<p>pYSDS [UART][SetTriggerQualifier] : Set the UART Qualifier condition</p>\n\n<pre><code>Arguments :\n    Qualifier : EQUAL | MORE | LESS\n\nReturns\n    self.GetAllErrors()\n    or\n    -1 : Invalid qualifier\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Qualifier</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.ConfigureTriggerData", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.ConfigureTriggerData", "kind": "function", "doc": "<p>pySDS [UART][ConfigureTriggerData] : Configure triggering data</p>\n\n<pre><code>Arguments :\n    Data : Data to be used\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid value\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.SetTriggerBaud", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.SetTriggerBaud", "kind": "function", "doc": "<p>pySDS [UART][SetTriggerBaud] : Set the baud rate of the UART comm</p>\n\n<pre><code>Arguments :\n    Baud : Value.\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Baud\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Baud</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.ConfigureTriggerDataLen", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.ConfigureTriggerDataLen", "kind": "function", "doc": "<p>pySDS [UART][ConfigureTriggerDataLen] : Configure the number of bits to trigger</p>\n\n<pre><code>Arguments :\n    Len : 5 to 8\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Len\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Len</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.ConfigureTriggerParity", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.ConfigureTriggerParity", "kind": "function", "doc": "<p>pySDS [UART][ConfigureTriggerParity] : Configure the parity bit used</p>\n\n<pre><code>Arguments :\n    Parity : ODD | EVEN | NONE\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Parity\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Parity</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.ConfigureTriggerPolarity", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.ConfigureTriggerPolarity", "kind": "function", "doc": "<p>pySDS [UART][ConfigureTriggerPolarity] : Configure the bus polarity</p>\n\n<pre><code>Arguments :\n    Polarity : LOW | HIGH\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Polarity\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Polarity</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.ConfigureTriggerStop", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.ConfigureTriggerStop", "kind": "function", "doc": "<p>pySDS [UART][ConfigureTriggerStop] : Configure the number of stops bits used</p>\n\n<pre><code>Arguments :\n    Stop : 1 | 1.5 | 2\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid stop bit config\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Stop</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.UART.SiglentUART.ConfigureTriggerBitOrder", "modulename": "SDSPy.trigger.UART", "qualname": "SiglentUART.ConfigureTriggerBitOrder", "kind": "function", "doc": "<p>pySDS [UART][ConfigureTriggerBitOrder] : Configure the bit order on the comm</p>\n\n<pre><code>Arguments :\n    Order : LSB | MSB\n\nReturns :\n    self.GetAllErrors()\n    or\n    -1 : Invalid Order\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Order</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger", "modulename": "SDSPy.trigger.trigger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger", "kind": "class", "doc": "<p>pySDS [Files][SiglentTrigger] : Class herited from SiglentBase.\n                                Store all command related the control of the triggering system</p>\n\n<pre><code>                            Due to advanced features available, this class group subclasses.\n                            Thus, it's possible to trigger on serial busses for a specific address or conditions.\n</code></pre>\n\n<p>WARNING : Advanced features are linked to bus decoding ability, and can sometimes interfer between their configurations !</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n    +\n    I2C (SiglentIIC Class), specified for I2C operation\n    SPI (SiglentSPI Class), specified for SPI operation\n    LIN (SiglentLIN Class), specified for LIN operation\n    SERIAL (SiglentUART Class), specified for UART operation\n    CAN (SiglentCAN Class), specified for CAN Operation\n\nMethods :\n    Private (0) :\n        None\n\n    Public (15):\n        SetCoupling :   Configure trigger coupling\n        SetDelay :      Configure trigger delay\n        GetDelay :      Get trigger delay\n        SetLevel1 :     Set threshold 1\n        SetLevel2 :     Set threshold 2\n        SetMode :       Set trigger mode\n        GetMode :       Get trigger mode\n        SetSelect :     Set select\n        GetSelect :     Get trigger select\n        SetSlope :      Set trigger slope\n        GetSlope :      Get trigger slope\n        SetWindow :     Set trigger Window\n        GetWindow :     Get trigger Window\n        SetPattern :    Set trigger pattern\n        GetPattern :    Get trigger pattern\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.__init__", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.__init__", "kind": "function", "doc": "<p>Overhide the standard class init to store some more advanced data !</p>\n\n<p>Check SiglentBase doc before !</p>\n\n<p>Added attributes :\n    Private (0) :</p>\n\n<pre><code>Public (0) :\n    I2C (SiglentIIC Class), specified for I2C operation\n    SPI (SiglentSPI Class), specified for SPI operation\n    LIN (SiglentLIN Class), specified for LIN operation\n    SERIAL (SiglentUART Class), specified for UART operation\n    CAN (SiglentCAN Class), specified for CAN Operation\n</code></pre>\n\n<p>Added methods :\n    Private (0) :\n        None</p>\n\n<pre><code>Public (0) :\n    None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">instr</span>, </span><span class=\"param\"><span class=\"n\">baseclass</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.I2C", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.I2C", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SPI", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SPI", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.LIN", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.LIN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.CAN", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.CAN", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.Serial", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.Serial", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetCoupling", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetCoupling", "kind": "function", "doc": "<p>PySDS [Trigger][SetCoupling] :  Configure the source and coupling of the trigger</p>\n\n<p>WARNING : The command to know the state of the trigger hasn't been developped since it suppose we know the channel used...</p>\n\n<pre><code>Arguments :\n    Channel : C1 | C2 | C3 | C4 | EX | EX5 | LINE : You can pass a member of the ENUM TriggerSources, or it's string. (Warning : Make sure to remain consistent, otherwise the last channel used will be used)\n    Mode : AC | DC | HFREF | LFREJ : You can pass a member of the ENUM TriggerModes or it's name direcly\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetDelay", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetDelay", "kind": "function", "doc": "<p>PySDS [Trigger][SetDelay] :  Configure the delay (may be positive or negatives)* between the trigger and the first acquistion</p>\n\n<p>WARNING : Positive delay are only supported on some devices.</p>\n\n<pre><code>Arguments :\n    Delay : The delay in ms to apply\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Delay</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.GetDelay", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.GetDelay", "kind": "function", "doc": "<p>PySDS [Trigger][GetDelay] :  Read the delay applied between trigger and acquisition</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Float : The number of ms of delay\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetLevel1", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetLevel1", "kind": "function", "doc": "<p>PySDS [Trigger][SetLevel1] :  Set the level of the specified trigger for a specific channel</p>\n\n<pre><code>Arguments :\n    Channel : C1 | C2 | C3 | C4 | EX | EX5 | LINE : You can pass a member of the ENUM TriggerSources, or it's string. (Warning : Make sure to remain consistent, otherwise the last channel used will be used)\n    Value : The value in V where to place the trigger\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetLevel2", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetLevel2", "kind": "function", "doc": "<p>PySDS [Trigger][SetLevel2] :  Set the level of the specified trigger for a specific channel</p>\n\n<p>WARNING : This function is not available on SPO devices</p>\n\n<pre><code>Arguments :\n    Channel : C1 | C2 | C3 | C4 | EX | EX5 | LINE : You can pass a member of the ENUM TriggerSources, or it's string. (Warning : Make sure to remain consistent, otherwise the last channel used will be used)\n    Value : The value in V where to place the trigger\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetMode", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetMode", "kind": "function", "doc": "<p>PySDS [Trigger][SetMode] :  Configure the mode of operation of the trigger</p>\n\n<pre><code>Arguments :\n    Mode : AUTO | NORM | SINGLE | STOP : Restrained to theses values by an enum.\n\nReturns :\n    Float : The number of ms of delay\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.GetMode", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.GetMode", "kind": "function", "doc": "<p>PySDS [Trigger][GetMode] :  Read the mode of operation of the trigger</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String : The mode\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetSelect", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetSelect", "kind": "function", "doc": "<p>PySDS [Trigger][SetSelect] :  Configure the trigger for very advanced usages.</p>\n\n<p>WARNING :   Due to the very advanced usage of this function, and the poor traduction / updates of the documentation, I'm currently unable to provide checking.\n            Thus, the function will only pass settings as given, without even trying to make a compatibility check.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.GetSelect", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.GetSelect", "kind": "function", "doc": "<p>PySDS [Trigger][GetSelect] :    Read the trigger select configuration</p>\n\n<p>WARNING : Due to the complexity of this function, and the lack of proper traduction / explanations, this function only return a string.</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    String :Command output\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetSlope", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetSlope", "kind": "function", "doc": "<p>PySDS [Trigger][SetSlope] :  Configure the 'orientation' of the edge used to trigger.</p>\n\n<pre><code>Arguments :\n    Channel : The channel used for trigger. (Warning : Make sure to remain consistent, otherwise the last channel used will be used)\n    Slope : NEG | POS | WINDOW : The edge used to trigger\n\nReturns :\n    self.GetAllErrors() : List of errors TRSL\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Slope</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.GetSlope", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.GetSlope", "kind": "function", "doc": "<p>PySDS [Trigger][GetSlope] :  Return the configured slope for the trigger</p>\n\n<pre><code>Arguments :\n    Channel : The channel used for trigger. (Warning : Make sure to remain consistent, otherwise the last channel used will be used)\n\nReturns :\n    String : The slope used\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetWindow", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetWindow", "kind": "function", "doc": "<p>PySDS [Trigger][SetWindow] :  Set the height of the Window used for trigger</p>\n\n<pre><code>Arguments :\n    Value (float) : The value in volt\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.GetWindow", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.GetWindow", "kind": "function", "doc": "<p>PySDS [Trigger][GetWindow] :  Get the height of the trigger window</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    Value in volt (float)\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.SetPattern", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.SetPattern", "kind": "function", "doc": "<p>PySDS [Trigger][SetPattern] :  Configure a triggering pattern (Enable multi channel triggering)</p>\n\n<pre><code>Arguments :\n    Source : List of the sources used for the operation. Can only be C1 | C2 | C3 | C4\n    Status : List of the status for each source : X | L | H (X = don't care)\n    Pattern : AND | OR | NAND | NOR\n\nReturns :\n    self.GetAllErrors() : List of errors\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Sources</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">Status</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">Pattern</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.trigger.trigger.SiglentTrigger.GetPattern", "modulename": "SDSPy.trigger.trigger", "qualname": "SiglentTrigger.GetPattern", "kind": "function", "doc": "<p>PySDS [Trigger][GetPattern] : Read the used pattern trigger</p>\n\n<pre><code>Arguments :\n    None\n\nReturns :\n    List of Channel, Conditions and Pattern\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "SDSPy.waveform", "modulename": "SDSPy.waveform", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.waveform.waveform", "modulename": "SDSPy.waveform.waveform", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SDSPy.waveform.waveform.SiglentWaveform", "modulename": "SDSPy.waveform.waveform", "qualname": "SiglentWaveform", "kind": "class", "doc": "<p>pySDS [Files][SiglentWaveform] :    Class herited from SiglentBase.\n                                    Store all command related the control of waveform storage</p>\n\n<pre><code>Attributes :\n    Herited from SiglentBase\n\nMethods :\n    Private (0) :\n        None\n\n    Public (1):\n        GetWaveformData :       Read the waveform data\n</code></pre>\n", "bases": "SDSPy.BaseOptionnalClass.SiglentBase"}, {"fullname": "SDSPy.waveform.waveform.SiglentWaveform.GetWaveformData", "modulename": "SDSPy.waveform.waveform", "qualname": "SiglentWaveform.GetWaveformData", "kind": "function", "doc": "<p>pySDS [Waveform][GetWaveformData] : Return the raw data for a waveform</p>\n\n<p>WARNING :   Due to high complexity in the formulaes, this function set the export to it's own settings (max number of points !)\n            Otherwise, this would cause issues on the parsing of timebases and so...</p>\n\n<pre><code>Arguments :\n    Channel :   Channel to be exported (Cx, Dx, MATH)\n    Vdiv :      Voltage scale for the selected channel      Default to 1\n    Vos :       Voltage offset for the selected channel     Default to 0\n    Tdiv :      Timebase value                              Default to 1 ns\n    SampleNumber : Number of sample in memory (SANU) :      Default to 1000\n\nReturns :\n    List of points (Voltages)\n    or\n    -1000 : Invalid channel\n    -1001 : Did not fetch the end of message\n    -1002 : Fetched invalid header\n    -1003 : Fetched wrong channel\n    -1004 : Fetched incorrect number of bytes\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Channel</span>, </span><span class=\"param\"><span class=\"n\">Vdiv</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">Vos</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">Tdiv</span><span class=\"o\">=</span><span class=\"mf\">1e-09</span>, </span><span class=\"param\"><span class=\"n\">SampleNumber</span><span class=\"o\">=</span><span class=\"mi\">1000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();